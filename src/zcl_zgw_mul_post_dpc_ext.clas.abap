CLASS ZCL_ZGW_MUL_POST_DPC_EXT DEFINITION
  PUBLIC
  INHERITING FROM ZCL_ZGW_MUL_POST_DPC
  CREATE PUBLIC .

  PUBLIC SECTION.
    METHODS CUSTOME_CREATE_DEEP_ENTITY
      IMPORTING
        !IV_ENTITY_NAME          TYPE STRING OPTIONAL
        !IV_ENTITY_SET_NAME      TYPE STRING OPTIONAL
        !IV_SOURCE_NAME          TYPE STRING OPTIONAL
        !IO_DATA_PROVIDER        TYPE REF TO /IWBEP/IF_MGW_ENTRY_PROVIDER
        !IT_KEY_TAB              TYPE /IWBEP/T_MGW_NAME_VALUE_PAIR OPTIONAL
        !IT_NAVIGATION_PATH      TYPE /IWBEP/T_MGW_NAVIGATION_PATH OPTIONAL
        !IO_EXPAND               TYPE REF TO /IWBEP/IF_MGW_ODATA_EXPAND
        !IO_TECH_REQUEST_CONTEXT TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITY_C OPTIONAL
      EXPORTING
        !ER_DEEP_ENTITY          TYPE REF TO ZCL_ZGW_MUL_POST_MPC_EXT=>TS_DEEP_ENTITY
      RAISING
        /IWBEP/CX_MGW_BUSI_EXCEPTION
        /IWBEP/CX_MGW_TECH_EXCEPTION .

    METHODS /IWBEP/IF_MGW_APPL_SRV_RUNTIME~CREATE_DEEP_ENTITY
        REDEFINITION .
protected section.
private section.
ENDCLASS.



CLASS ZCL_ZGW_MUL_POST_DPC_EXT IMPLEMENTATION.


  METHOD /IWBEP/IF_MGW_APPL_SRV_RUNTIME~CREATE_DEEP_ENTITY.
**TRY.
*CALL METHOD SUPER->/IWBEP/IF_MGW_APPL_SRV_RUNTIME~CREATE_DEEP_ENTITY
*  EXPORTING
**    IV_ENTITY_NAME          =
**    IV_ENTITY_SET_NAME      =
**    IV_SOURCE_NAME          =
*    IO_DATA_PROVIDER        =
**    IT_KEY_TAB              =
**    IT_NAVIGATION_PATH      =
*    IO_EXPAND               =
**    IO_TECH_REQUEST_CONTEXT =
**  IMPORTING
**    ER_DEEP_ENTITY          =
*    .
** CATCH /IWBEP/CX_MGW_BUSI_EXCEPTION .
** CATCH /IWBEP/CX_MGW_TECH_EXCEPTION .
**ENDTRY.


    DATA: IR_DEEP_ENTITY  TYPE ZCL_ZGW_MUL_POST_MPC_EXT=>TS_HEADER.
    CASE IV_ENTITY_SET_NAME.
*-------------------------------------------------------------------------*
*  When EntitySet 'HeaderSet' is been invoked via service Url
*-------------------------------------------------------------------------*
      WHEN 'HeaderSet'.
*        CALL METHOD ME->CUSTOME_CREATE_DEEP_ENTITY
*          EXPORTING
*            IV_ENTITY_NAME          = IV_ENTITY_NAME
*            IV_ENTITY_SET_NAME      = IV_ENTITY_SET_NAME
*            IV_SOURCE_NAME          = IV_SOURCE_NAME
*            IT_KEY_TAB              = IT_KEY_TAB
*            IT_NAVIGATION_PATH      = IT_NAVIGATION_PATH
*            IO_EXPAND               = IO_EXPAND
*            IO_TECH_REQUEST_CONTEXT = IO_TECH_REQUEST_CONTEXT
*            IO_DATA_PROVIDER        = IO_DATA_PROVIDER
*          IMPORTING
*            ER_DEEP_ENTITY          = IR_DEEP_ENTITY.

        COPY_DATA_TO_REF(
        EXPORTING
         IS_DATA = IR_DEEP_ENTITY
        CHANGING
         CR_DATA = ER_DEEP_ENTITY   ).
    ENDCASE.
  ENDMETHOD.


  METHOD CUSTOME_CREATE_DEEP_ENTITY.
    TYPES:
      BEGIN OF TYP_HEADER,
        FLD_1 TYPE C LENGTH 4,
        FLD_2 TYPE C LENGTH 4,
        FLD_3 TYPE C LENGTH 10,
      END OF TYP_HEADER .

    TYPES:
      BEGIN OF TYP_ITEM,
        IFLD_1 TYPE C LENGTH 4,
        IFLD_2 TYPE C LENGTH 4,
        IFLD_3 TYPE C LENGTH 10,
      END OF TYP_ITEM .

    TYPES:
      BEGIN OF TYP_RESULT,
        MSG_1 TYPE STRING,
        MSG_2 TYPE STRING,
      END OF TYP_RESULT .

    DATA: IR_DEEP_ENTITY TYPE                    ZCL_ZGW_MUL_POST_MPC_EXT=>TS_DEEP_ENTITY,
          IT_RFC_HEADER  TYPE STANDARD TABLE OF  TYP_HEADER,
          WA_RFC_HEADER  TYPE                    TYP_HEADER,
          IT_RFC_ITEM    TYPE TABLE OF           TYP_ITEM,
          WA_RFC_ITEM    TYPE                    TYP_ITEM,
          IT_RFC_RESULT  TYPE STANDARD TABLE OF  TYP_RESULT,
          WA_RFC_RESULT  TYPE                    TYP_RESULT,
          WA_RESULTSET   TYPE                    ZCL_ZGW_MUL_POST_MPC_EXT=>TS_RETURN,
          WA_ITEM        TYPE                    ZCL_ZGW_MUL_POST_MPC_EXT=>TS_ITEM.

    FIELD-SYMBOLS: <WA_ITEM>   TYPE ZCL_ZGW_MUL_POST_MPC_EXT=>TS_ITEM.
    FIELD-SYMBOLS: <WA_RESULT> TYPE ZCL_ZGW_MUL_POST_MPC_EXT=>TS_RETURN.

*Transform INPUT REQUEST FROM ODATA-SERVICE into the internal structure
    IO_DATA_PROVIDER->READ_ENTRY_DATA(
    IMPORTING
     ES_DATA = IR_DEEP_ENTITY ).

* extract Header details from Entity 'Header'
    WA_RFC_HEADER-FLD_1     = IR_DEEP_ENTITY-FIELD1.
    WA_RFC_HEADER-FLD_2     = IR_DEEP_ENTITY-FIELD2.
    WA_RFC_HEADER-FLD_3     = IR_DEEP_ENTITY-FIELD3.
    APPEND WA_RFC_HEADER TO IT_RFC_HEADER.
    CLEAR  WA_RFC_HEADER.

* extract Item details from Entity 'Item' (tabulabr input fields)
    LOOP AT IR_DEEP_ENTITY-ITEMSET ASSIGNING <WA_ITEM>.
      WA_RFC_ITEM-IFLD_1      = <WA_ITEM>-PO_ITEM.
      WA_RFC_ITEM-IFLD_2      = <WA_ITEM>-NET_PRICE.
      WA_RFC_ITEM-IFLD_3      = <WA_ITEM>-MATERIAL.
      APPEND WA_RFC_ITEM TO IT_RFC_ITEM.
      CLEAR  WA_RFC_ITEM.
    ENDLOOP.

*** Calling SAP R3's RFC via RFCDestination
    CALL FUNCTION 'ZTEST_RFC_FIORI' DESTINATION 'SDS_200'
      TABLES
        TBL_HEADER = IT_RFC_HEADER
        TBL_ITEM   = IT_RFC_ITEM
        TBL_RESULT = IT_RFC_RESULT.

*EXPORTING OUTPUT TO oData EntitySet 'ResultSet'
    LOOP AT IT_RFC_RESULT INTO WA_RFC_RESULT.
      "Return output into Entity 'RESULT' via 'NavigationProperty=NAVRESULT'
*      WA_RESULTSET-MESSAGE = WA_RFC_RESULT-MSG_1.
*      WA_RESULTSET-ID = WA_RFC_RESULT-MSG_2.
*      APPEND WA_RESULTSET TO ER_DEEP_ENTITY-.
*      CLEAR WA_RESULTSET.
    ENDLOOP.
    COMMIT WORK.
  ENDMETHOD.
ENDCLASS.
