*&---------------------------------------------------------------------*
*& Report ZYOY_SALES
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZYOY_SALES.
TABLES sscrfields.

TYPES : BEGIN OF TY_HDR ,
          CLINT TYPE KLAH-CLINT,
          OBJEK TYPE KSSK-OBJEK,
          CLASS TYPE KLAH-CLASS,
          MATKL TYPE MARA-MATKL,
          MATNR TYPE MARA-MATNR,
        END OF TY_HDR,

        BEGIN OF TY_KLAH,
          CLINT TYPE KLAH-CLINT,
          CLASS TYPE KLAH-CLASS,
        END OF TY_KLAH,

        BEGIN OF TY_KSSK,
          OBJEK TYPE KSSK-OBJEK ,
          CLINT TYPE KLAH-CLINT ,
          CLASS TYPE KLAH-CLASS ,
          MATKL TYPE MARA-MATKL,
          MATNR TYPE MARA-MATNR,
        END OF TY_KSSK,

         BEGIN OF TY_DATA,
          CLASS TYPE KLAH-CLASS,
          CLINT TYPE KLAH-CLINT,
          OBJEK TYPE KSSK-OBJEK,
          MATKL TYPE MARA-MATKL,
        END OF TY_DATA,

        BEGIN OF TY_MARA,
          MATKL TYPE MARA-MATKL,
          MATNR TYPE MARA-MATNR,
        END OF TY_MARA,

        BEGIN OF TY_MSEG,
          MBLNR      TYPE MSEG-MBLNR      ,
          MJAHR      TYPE MSEG-MJAHR      ,
          ZEILE      TYPE MSEG-ZEILE      ,
          BUDAT_MKPF TYPE MSEG-BUDAT_MKPF ,
          BWART      TYPE MSEG-BWART      ,
          EXVKW      TYPE MSEG-EXVKW      ,
          MENGE      TYPE MSEG-MENGE      ,
          MATNR      TYPE MSEG-MATNR      ,
          WERKS      TYPE MSEG-WERKS,
          MAKTX      TYPE MAKT-MAKTX      ,
        END OF TY_MSEG,

        BEGIN OF TY_MONTH,
          KEY  TYPE INT2,
          TEXT TYPE CHAR20,
        END OF TY_MONTH,

        BEGIN OF TY_MG,
          MATNR      TYPE MSEG-MATNR      ,
          MATKL      TYPE MARA-MATKL,
          MENGE      TYPE MSEG-MENGE      ,
          MAKTX      TYPE MAKT-MAKTX      ,
          NETWR      TYPE VBRP-NETWR      ,
          MJAHR      TYPE MSEG-MJAHR      ,
          MONTH      TYPE CHAR20          ,
          BUDAT_MKPF TYPE MSEG-BUDAT_MKPF ,
        END OF TY_MG,

        BEGIN OF TY_FINAL,
          SR_NO  TYPE INT2,
          MATNR  TYPE MSEG-MATNR,
          MAKTX  TYPE MAKT-MAKTX,
          MATKL  TYPE MARA-MATKL,
          MENGE  TYPE MSEG-MENGE      ,
          NETWR  TYPE VBRP-NETWR,
          MENGE1 TYPE MSEG-MENGE      ,
          NETWR1 TYPE VBRP-NETWR,
          MENGE2 TYPE MSEG-MENGE      ,
          NETWR2 TYPE VBRP-NETWR,
          MENGE3 TYPE MSEG-MENGE      ,
          NETWR3 TYPE VBRP-NETWR,
          MENGE4 TYPE MSEG-MENGE      ,
          NETWR4 TYPE VBRP-NETWR,
        END OF TY_FINAL,

        BEGIN OF TY_VBRP,
          VBELN TYPE VBRP-VBELN,
          POSNR TYPE VBRP-POSNR,
          MATNR TYPE VBRP-MATNR,
          MATKL TYPE VBRP-MATKL,
          NETWR TYPE VBRP-NETWR,
          PRSDT TYPE VBRP-PRSDT,
          FKIMG TYPE VBRP-FKIMG,
          WERKS TYPE VBRP-WERKS,
        END OF TY_VBRP,

        BEGIN OF TY_SEL,
          MON TYPE INT2,
          YR  TYPE MSEG-MJAHR,
        END OF TY_SEL.

DATA  : IT_HDR   TYPE TABLE OF TY_HDR,
        IT_KLAH  TYPE TABLE OF TY_KLAH,
        IT_KSSK  TYPE TABLE OF TY_KSSK,
        IT_MSEG  TYPE TABLE OF TY_MSEG,
        IT_MSEG1  TYPE TABLE OF TY_MSEG,
        IT_MEN  TYPE TABLE OF TY_MSEG,
        IT_MG    TYPE TABLE OF TY_MG,
        IT_MG1    TYPE TABLE OF TY_MG,
        IT_MONTH TYPE TABLE OF VRM_VALUE,
        IT_SEL   TYPE TABLE OF TY_sEL,
        IT_TABLE TYPE REF   TO CL_SALV_TABLE       ,
        IT_FINAL TYPE TABLE OF TY_FINAL,
        IT_VBRP  TYPE TABLE OF TY_VBRP,
        IT_DATA  TYPE TABLE OF TY_DATA,
        IT_MARA  TYPE TABLE OF TY_MARA,
        IT_KLAH1 TYPE TABLE OF TY_KLAH.

DATA  : WA_HDR   TYPE TY_HDR,
        WA_KLAH  TYPE TY_KLAH,
        WA_MSEG  TYPE TY_MSEG,
        WA_MSEG1  TYPE TY_MSEG,
        WA_MEN  TYPE TY_MSEG,
        WA_KSSK  TYPE TY_KSSK,
        WA_MG    TYPE TY_MG,
        WA_MG1    TYPE TY_MG,
        WA_SEL   TYPE TY_SEL,
        WA_FINAL TYPE TY_FINAL,
        WA_VBRP  TYPE TY_VBRP,
        WA_MARA  TYPE TY_MARA,
        WA_DATA  TYPE TY_DATA,
        WA_MONTH TYPE VRM_VALUE.

DATA  : GV_GRP   TYPE KLAH-CLASS,
        GV_MATKL TYPE MARA-MATKL,
        GV_MATNR TYPE MARA-MATNR.

DATA  : LV_DATE    TYPE MSEG-BUDAT_MKPF,
        LV_TO_DATE TYPE MSEG-BUDAT_MKPF,
        LV_F_DATE1 TYPE MSEG-BUDAT_MKPF,
        LV_F_DATE2 TYPE MSEG-BUDAT_MKPF,
        LV_F_DATE3 TYPE MSEG-BUDAT_MKPF,
        LV_F_DATE4 TYPE MSEG-BUDAT_MKPF,
        LV_F_DATE5 TYPE MSEG-BUDAT_MKPF,
        LV_T_DATE1 TYPE MSEG-BUDAT_MKPF,
        LV_T_DATE2 TYPE MSEG-BUDAT_MKPF,
        LV_T_DATE3 TYPE MSEG-BUDAT_MKPF,
        LV_T_DATE4 TYPE MSEG-BUDAT_MKPF,
        LV_T_DATE5 TYPE MSEG-BUDAT_MKPF,
        LV_MON(2)   TYPE C  ,
        MONTH(2)    TYPE C,
        DAYS(2)     TYPE C,
        LV_DAYS     TYPE P,
        FLAG        TYPE C,
        CLICK_COUNT TYPE I,
        TEXT_1      TYPE CHAR40,
        SR_NO       TYPE INT4,
        LV_MATKL    TYPE MARA-MATKL,
        TEXT        TYPE CHAR10,
        MTH         TYPE CHAR20.

DATA: LO_HEADER  TYPE REF TO CL_SALV_FORM_LAYOUT_GRID,
      LO_H_LABEL TYPE REF TO CL_SALV_FORM_LABEL,
      LO_H_FLOW  TYPE REF TO CL_SALV_FORM_LAYOUT_FLOW.

DATA : LR_COLUMNS   TYPE REF TO CL_SALV_COLUMNS_TABLE, "columns instance
       LR_COL       TYPE REF TO CL_SALV_COLUMN_TABLE.  " column instance

DATA : NEWLINE(2) TYPE X VALUE 'ODOA',
       LF(1)      TYPE C VALUE CL_ABAP_CHAR_UTILITIES=>NEWLINE.

DATA: lo_aggrs     TYPE REF TO cl_salv_aggregations,
      LO_FUNCTIONS TYPE REF TO CL_SALV_FUNCTIONS_LIST.



SELECTION-SCREEN : BEGIN OF BLOCK b1 WITH FRAME TITLE TEXT-001.

SELECT-OPTIONS: S_GRP   FOR GV_GRP ,
                S_MATKL FOR GV_MATKL,
                S_MATNR FOR GV_MATNR.

SELECTION-SCREEN BEGIN OF LINE.

  SELECTION-SCREEN COMMENT 22(10) MON.
  PARAMETERS P_MONTH TYPE INT2.
  SELECTION-SCREEN COMMENT 47(10) YR.
  PARAMETERS P_YEAR TYPE MSEG-MJAHR.

SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.

  SELECTION-SCREEN COMMENT 22(10) MON1.
  PARAMETERS P_MONTH1 TYPE INT2.
  SELECTION-SCREEN COMMENT 47(10) YR1.
  PARAMETERS P_YEAR1 TYPE MSEG-MJAHR.

SELECTION-SCREEN END OF LINE.


SELECTION-SCREEN BEGIN OF LINE.

  SELECTION-SCREEN COMMENT 22(10) MON2 MODIF ID ID1.
  PARAMETERS P_MONTH2 TYPE INT2 MODIF ID ID1.
  SELECTION-SCREEN COMMENT 47(10) YR2 MODIF ID ID1.
  PARAMETERS P_YEAR2 TYPE MSEG-MJAHR MODIF ID ID1.

SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.

  SELECTION-SCREEN COMMENT 22(10) MON3 MODIF ID ID2.
  PARAMETERS P_MONTH3 TYPE INT2 MODIF ID ID2.
  SELECTION-SCREEN COMMENT 47(10) YR3  MODIF ID ID2.
  PARAMETERS P_YEAR3 TYPE MSEG-MJAHR MODIF ID ID2.

SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.

  SELECTION-SCREEN COMMENT 22(10) MON4 MODIF ID ID3.
  PARAMETERS P_MONTH4 TYPE INT2 MODIF ID ID3.
  SELECTION-SCREEN COMMENT 47(10) YR4 MODIF ID ID3.
  PARAMETERS P_YEAR4 TYPE MSEG-MJAHR MODIF ID ID3.

SELECTION-SCREEN END OF LINE.



SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN PUSHBUTTON 30(15) w_button USER-COMMAND BUT1.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN : END OF BLOCK b1.

AT SELECTION-SCREEN.
  CASE SY-UCOMM.
    WHEN 'BUT1'.
     CASE CLICK_COUNT.
       WHEN '0'.
         FLAG = '1'.
         CLICK_COUNT = CLICK_COUNT + 1.
       WHEN '1'.
         FLAG = '2'.
         CLICK_COUNT = CLICK_COUNT + 1.
       WHEN '2'.
         FLAG = '3'.
         CLICK_COUNT = CLICK_COUNT + 1.
     ENDCASE.
  ENDCASE.

PERFORM VALUE_VALIDATIONS.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR S_GRP-LOW.
** Calling the perform method when the low field of select option pernr's f4 is clicked
  PERFORM GRP_F4.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR S_GRP-HIGH.
** Calling the perform method when the high field of select option pernr's f4 is clicked
  PERFORM GRP_F4.

INITIALIZATION.
  YR = 'YEAR'.
  YR1 = 'YEAR'.
  YR2 = 'YEAR'.
  YR3 = 'YEAR'.
  YR4 = 'YEAR'.
  MON = 'MONTH'.
  MON1 = 'MONTH'.
  MON2 = 'MONTH'.
  MON3 = 'MONTH'.
  MON4 = 'MONTH'.
  W_BUTTON = 'Add Month'.
  FLAG = ' '.
  CLICK_COUNT = 0.

  LOOP AT SCREEN.
    IF SCREEN-GROUP1 = 'ID1' OR
       SCREEN-GROUP1 = 'ID2' OR
       SCREEN-GROUP1 = 'ID3' .
        SCREEN-ACTIVE = '0'.
        MODIFY SCREEN.
    ENDIF.
  ENDLOOP.

AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.
     IF SCREEN-GROUP1 = 'IDI'.
        IF FLAG = '1'.
           screen-active = 1.
        ELSE.
          screen-active = 0.
        ENDIF.
        MODIFY SCREEN.
     ENDIF.
     IF SCREEN-GROUP1 = 'ID2'.
       IF FLAG = '2'.
         screen-active = 1.
       ELSE.
         screen-active = 0.
       ENDIF.
       MODIFY SCREEN.
     ENDIF.
     IF SCREEN-GROUP1 = 'ID3'.
       IF FLAG = '3'.
         screen-active = 1.
       ELSE.
        screen-active = 0.
       ENDIF.
       MODIFY SCREEN.
     ENDIF.

 ENDLOOP.

 START-OF-SELECTION.

SELECT KLAH~CLASS
       KLAH~CLINT
       KSSK~OBJEK
       KLAH1~CLASS AS MATKL
INTO TABLE IT_DATA
FROM KLAH AS KLAH INNER JOIN KSSK AS KSSK ON ( KSSK~CLINT EQ KLAH~CLINT )
                  INNER JOIN KLAH AS KLAH1 ON ( KSSK~OBJEK EQ KLAH1~CLINT )
WHERE KLAH~KLART = '026' AND
      KLAH~WWSKZ = '0' AND
      KLAH~CLASS IN S_GRP AND
      KLAH1~CLASS IN S_MATKL.

IF IT_DATA IS NOT INITIAL.
SELECT MATKL
       MATNR
INTO TABLE IT_MARA
FROM MARA
FOR ALL ENTRIES IN IT_DATA
WHERE MATKL EQ IT_DATA-MATKL AND
      MATNR IN S_MATNR.
ENDIF.

IF P_YEAR IS INITIAL.
  P_YEAR = SY-DATUM+0(4).
ENDIF.

IF P_MONTH IS INITIAL.
  P_MONTH = SY-DATUM+4(2).
ENDIF.
IF IT_MARA IS NOT INITIAL.
  SELECT A~MBLNR
       A~MJAHR
       A~ZEILE
       A~BUDAT_MKPF
       A~BWART
       A~EXVKW
       A~MENGE
       A~MATNR
       A~WERKS
       B~MAKTX
FROM   MSEG  AS A INNER JOIN MAKT AS B ON ( A~MATNR EQ B~MATNR )
INTO TABLE IT_MSEG
FOR ALL ENTRIES IN IT_MARA
WHERE A~MATNR = IT_MARA-MATNR AND
      A~BWART EQ '251'  AND
      A~MJAHR IN ( P_YEAR , P_YEAR1 , P_YEAR2 , P_YEAR3 , P_YEAR4 ).

ENDIF.
IF IT_MSEG IS NOT INITIAL.
SELECT VBELN
       POSNR
       MATNR
       MATKL
       NETWR
       PRSDT
       FKIMG
       WERKS
FROM   VBRP
INTO TABLE IT_VBRP
FOR ALL ENTRIES IN IT_MSEG
WHERE MATNR = IT_MSEG-MATNR AND
      PRSDT = IT_MSEG-BUDAT_MKPF." AND
*      WERKS = IT_MSEG-WERKS.
ENDIF.
SORT IT_MSEG BY MATNR BUDAT_MKPF.
IT_MSEG1[] = IT_MSEG[].
DELETE ADJACENT DUPLICATES FROM IT_MSEG COMPARING MATNR BUDAT_MKPF.
LOOP AT IT_MSEG INTO WA_MSEG .

  LV_MON = WA_MSEG-BUDAT_MKPF+4(2).
  WA_MG-MONTH = LV_MON.

    MOVE WA_MSEG-MJAHR      TO WA_MG-MJAHR .
    MOVE WA_MSEG-MATNR      TO WA_MG-MATNR.
*    LOOP AT IT_MSEG1 INTO WA_MSEG1 WHERE MATNR = WA_MSEG-MATNR.
      LOOP AT IT_MSEG1 INTO WA_MSEG1 WHERE MATNR = WA_MSEG-MATNR AND BUDAT_MKPF = WA_MSEG-BUDAT_MKPF .
*    MOVE WA_MSEG-MENGE      TO WA_MG-MENGE.
        WA_MG-MENGE = WA_MG-MENGE + WA_MSEG1-MENGE.
*        LOOP AT IT_VBRP INTO WA_VBRP WHERE MATNR = WA_MSEG-MATNR AND ERDAT = WA_MSEG-BUDAT_MKPF AND FKIMG = WA_MSEG1-MENGE.
**      MOVE WA_VBRP-NETWR TO WA_MG-NETWR.
*       WA_MG-NETWR = WA_MG-NETWR + WA_VBRP-NETWR.
*      ENDLOOP.

      ENDLOOP.
      CLEAR WA_MSEG1.
    MOVE WA_MSEG-MAKTX      TO WA_MG-MAKTX.
    MOVE WA_MSEG-BUDAT_MKPF TO WA_MG-BUDAT_MKPF.

    READ TABLE IT_MARA INTO WA_MARA WITH KEY MATNR = WA_MSEG-MATNR.
    IF SY-SUBRC EQ 0.
      MOVE WA_MARA-MATKL TO WA_MG-MATKL.
    ENDIF.
*    READ TABLE IT_VBRP INTO WA_VBRP WITH KEY MATNR = WA_MSEG-MATNR ERDAT = WA_MSEG-BUDAT_MKPF FKIMG = WA_MSEG-MENGE.
*    IF SY-SUBRC = 0.
*    SORT IT_MSEG1 BY MENGE.
*    IT_MEN[] = IT_MSEG1[].
*    DELETE ADJACENT DUPLICATES FROM IT_MEN COMPARING MENGE.

*    LOOP AT IT_MEN INTO WA_MEN WHERE MATNR = WA_MSEG-MATNR AND BUDAT_MKPF = WA_MSEG-BUDAT_MKPF .


     LOOP AT IT_VBRP INTO WA_VBRP WHERE MATNR = WA_MSEG-MATNR AND PRSDT = WA_MSEG-BUDAT_MKPF ."AND FKIMG = WA_MSEG-MENGE.
*      MOVE WA_VBRP-NETWR TO WA_MG-NETWR.
       WA_MG-NETWR = WA_MG-NETWR + WA_VBRP-NETWR.
      ENDLOOP.
*       ENDLOOP.
*    ENDIF.

    APPEND  WA_MG TO IT_MG.

    CLEAR : WA_MSEG,
            WA_VBRP,
            WA_MG.


ENDLOOP.


*SORT IT_MG BY MATNR.
*DELETE ADJACENT DUPLICATES FROM IT_MG COMPARING MATNR.
SORT IT_MG BY MATNR.
IT_MG1[] = IT_MG[].
DELETE ADJACENT DUPLICATES FROM IT_MG1 COMPARING MATNR.

LOOP AT IT_MG1 INTO WA_MG1.
  SR_NO = SR_NO + 1.
 WA_FINAL-SR_NO = SR_NO.
  MOVE WA_MG1-MATNR TO WA_FINAL-MATNR.
  MOVE WA_MG1-MATKL TO WA_FINAL-MATKL.
 MOVE WA_MG1-MAKTX   TO WA_FINAL-MAKTX.
LOOP AT IT_MG INTO WA_MG WHERE MATNR = WA_MG1-MATNR .

 IF  WA_MG-MONTH EQ P_MONTH AND WA_MG-MJAHR EQ P_YEAR .
   WA_FINAL-MENGE = WA_FINAL-MENGE + WA_MG-MENGE.
   WA_FINAL-NETWR = WA_FINAL-NETWR + WA_MG-NETWR.
*    MOVE WA_MG-MENGE TO WA_FINAL-MENGE.
*    MOVE WA_MG-NETWR TO WA_FINAL-NETWR.
*    MOVE WA_MG-EXVKW TO WA_FINAL-EXVKW.
  ELSEIF WA_MG-MONTH EQ P_MONTH1 AND WA_MG-MJAHR EQ P_YEAR1.
    WA_FINAL-MENGE1 = WA_FINAL-MENGE1 + WA_MG-MENGE.
   WA_FINAL-NETWR1 = WA_FINAL-NETWR1 + WA_MG-NETWR.

*    MOVE WA_MG-MENGE TO WA_FINAL-MENGE1.
*     MOVE WA_MG-NETWR TO WA_FINAL-NETWR1.

*    MOVE WA_MG-EXVKW TO WA_FINAL-EXVKW1.
   ELSEIF WA_MG-MONTH EQ P_MONTH2 AND WA_MG-MJAHR EQ P_YEAR2.
    WA_FINAL-MENGE2 = WA_FINAL-MENGE2 + WA_MG-MENGE.
   WA_FINAL-NETWR2 = WA_FINAL-NETWR2 + WA_MG-NETWR.
*    MOVE WA_MG-MENGE TO WA_FINAL-MENGE2.
*     MOVE WA_MG-NETWR TO WA_FINAL-NETWR2.
*    MOVE WA_MG-EXVKW TO WA_FINAL-EXVKW2.
     ELSEIF WA_MG-MONTH EQ P_MONTH3 AND WA_MG-MJAHR EQ P_YEAR3.
      WA_FINAL-MENGE3 = WA_FINAL-MENGE3 + WA_MG-MENGE.
   WA_FINAL-NETWR3 = WA_FINAL-NETWR3 + WA_MG-NETWR.
*    MOVE WA_MG-MENGE TO WA_FINAL-MENGE3.
*     MOVE WA_MG-NETWR TO WA_FINAL-NETWR3.
*    MOVE WA_MG-EXVKW TO WA_FINAL-EXVKW3.
     ELSEIF WA_MG-MONTH EQ P_MONTH4 AND WA_MG-MJAHR EQ P_YEAR4.
    WA_FINAL-MENGE4 = WA_FINAL-MENGE4 + WA_MG-MENGE.
   WA_FINAL-NETWR4 = WA_FINAL-NETWR4 + WA_MG-NETWR.
*    MOVE WA_MG-MENGE TO WA_FINAL-MENGE4.
*     MOVE WA_MG-NETWR TO WA_FINAL-NETWR4.
*    MOVE WA_MG-EXVKW TO WA_FINAL-EXVKW4.
    ENDIF.



ENDLOOP.
APPEND WA_FINAL TO IT_FINAL.
    CLEAR WA_FINAL.
ENDLOOP.

CALL METHOD CL_SALV_TABLE=>FACTORY "get SALV factory instance
        EXPORTING
          LIST_DISPLAY = IF_SALV_C_BOOL_SAP=>FALSE
*         R_CONTAINER  =
*         CONTAINER_NAME =
        IMPORTING
          R_SALV_TABLE = IT_TABLE
        CHANGING
          T_TABLE      = IT_FINAL.

LR_columns = IT_table->get_columns( ).

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'MATNR' ).
LR_COL->set_long_text( 'CHILD SST NUMBER' ).
CLEAR: LR_COL.

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'MAKTX' ).
LR_COL->set_long_text( 'CHILD SST NUMBER DESCRIPTION' ).
CLEAR: LR_COL.

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'MATKL' ).
LR_COL->set_long_text( 'CATEGORY NUMBER' ).
LR_COL->set_SHORT_text( 'CAT NO.' ).
CLEAR: LR_COL.

MONTH = P_MONTH.
CONCATENATE MONTH '/' P_YEAR INTO TEXT SEPARATED BY SPACE.
CONCATENATE TEXT '[QUANTITY]' INTO TEXT_1 SEPARATED BY SPACE.

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'MENGE' ).
LR_COL->set_long_text( TEXT_1 ).
CLEAR: LR_COL.
CLEAR TEXT_1.

CONCATENATE TEXT '[SALES VALUE]' INTO TEXT_1 SEPARATED BY SPACE.

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'NETWR' ).
LR_COL->set_long_text( TEXT_1 ).
CLEAR: LR_COL.

CLEAR : TEXT,
        TEXT_1.

MONTH = P_MONTH1.
CONCATENATE MONTH '/' P_YEAR1 INTO TEXT SEPARATED BY SPACE.
CONCATENATE TEXT '[QUANTITY]' INTO TEXT_1 SEPARATED BY SPACE.
LR_COL ?= LR_COLUMNS->GET_COLUMN( 'MENGE1' ).
lr_COL->set_visible( value  = if_salv_c_bool_sap=>false ).
IF P_MONTH1 IS NOT INITIAL AND P_YEAR1 IS NOT INITIAL.
  lr_COL->set_visible( value  = if_salv_c_bool_sap=>TRUE ).
LR_COL->set_long_text( TEXT_1 ).
ENDIF.
CLEAR: LR_COL.
CLEAR TEXT_1.

CONCATENATE TEXT '[SALES VALUE]' INTO TEXT_1 SEPARATED BY SPACE.

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'NETWR1' ).
lr_COL->set_visible( value  = if_salv_c_bool_sap=>false ).
IF P_MONTH1 IS NOT INITIAL AND P_YEAR1 IS NOT INITIAL.
  lr_COL->set_visible( value  = if_salv_c_bool_sap=>TRUE ).
LR_COL->set_long_text( TEXT_1 ).
ENDIF.
CLEAR: LR_COL.

CLEAR : TEXT,
        TEXT_1.

MONTH = P_MONTH2.
CONCATENATE MONTH '/' P_YEAR2 INTO TEXT SEPARATED BY SPACE.
CONCATENATE TEXT '[QUANTITY]' INTO TEXT_1 SEPARATED BY SPACE.
LR_COL ?= LR_COLUMNS->GET_COLUMN( 'MENGE2' ).
lr_COL->set_visible( value  = if_salv_c_bool_sap=>false ).
IF P_MONTH2 IS NOT INITIAL AND P_YEAR2 IS NOT INITIAL.
  lr_COL->set_visible( value  = if_salv_c_bool_sap=>TRUE ).
LR_COL->set_long_text( TEXT_1 ).
ENDIF.
CLEAR: LR_COL.
CLEAR TEXT_1.

CONCATENATE TEXT '[SALES VALUE]' INTO TEXT_1 SEPARATED BY SPACE.

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'NETWR2' ).
lr_COL->set_visible( value  = if_salv_c_bool_sap=>false ).
IF P_MONTH2 IS NOT INITIAL AND P_YEAR2 IS NOT INITIAL.
  lr_COL->set_visible( value  = if_salv_c_bool_sap=>TRUE ).
LR_COL->set_long_text( TEXT_1 ).
ENDIF.
CLEAR: LR_COL.

CLEAR : TEXT,
        TEXT_1.

MONTH = P_MONTH3.
CONCATENATE MONTH '/' P_YEAR3 INTO TEXT SEPARATED BY SPACE.
CONCATENATE TEXT '[QUANTITY]' INTO TEXT_1 SEPARATED BY SPACE.
LR_COL ?= LR_COLUMNS->GET_COLUMN( 'MENGE3' ).
lr_COL->set_visible( value  = if_salv_c_bool_sap=>false ).
IF P_MONTH3 IS NOT INITIAL AND P_YEAR3 IS NOT INITIAL.
  lr_COL->set_visible( value  = if_salv_c_bool_sap=>TRUE ).
LR_COL->set_long_text( TEXT_1 ).
ENDIF.
CLEAR: LR_COL.
CLEAR TEXT_1.

CONCATENATE TEXT '[SALES VALUE]' INTO TEXT_1 SEPARATED BY SPACE.

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'NETWR3' ).
lr_COL->set_visible( value  = if_salv_c_bool_sap=>false ).
IF P_MONTH3 IS NOT INITIAL AND P_YEAR3 IS NOT INITIAL.
  lr_COL->set_visible( value  = if_salv_c_bool_sap=>TRUE ).
LR_COL->set_long_text( TEXT_1 ).
ENDIF.
CLEAR: LR_COL.

CLEAR : TEXT,
        TEXT_1.

MONTH = P_MONTH4.
CONCATENATE MONTH '/' P_YEAR4 INTO TEXT SEPARATED BY SPACE.
CONCATENATE TEXT '[QUANTITY]' INTO TEXT_1 SEPARATED BY SPACE.
LR_COL ?= LR_COLUMNS->GET_COLUMN( 'MENGE4' ).
lr_COL->set_visible( value  = if_salv_c_bool_sap=>false ).
IF P_MONTH4 IS NOT INITIAL AND P_YEAR4 IS NOT INITIAL.
  lr_COL->set_visible( value  = if_salv_c_bool_sap=>TRUE ).
LR_COL->set_long_text( TEXT_1 ).
ENDIF.
CLEAR: LR_COL.
CLEAR TEXT_1.

CONCATENATE TEXT '[SALES VALUE]' INTO TEXT_1 SEPARATED BY SPACE.

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'NETWR4' ).
lr_COL->set_visible( value  = if_salv_c_bool_sap=>false ).
IF P_MONTH4 IS NOT INITIAL AND P_YEAR4 IS NOT INITIAL.
  lr_COL->set_visible( value  = if_salv_c_bool_sap=>TRUE ).
LR_COL->set_long_text( TEXT_1 ).
ENDIF.
CLEAR: LR_COL.
CLEAR : TEXT,
        TEXT_1.
LR_COL ?= LR_COLUMNS->GET_COLUMN( 'SR_NO' ).
LR_COL->set_long_text( 'SR NO.' ).
CLEAR: LR_COL.

LO_FUNCTIONS = IT_TABLE->GET_FUNCTIONS( ).
    LO_FUNCTIONS->SET_DEFAULT( ABAP_TRUE ).

    CREATE OBJECT LO_HEADER.

 LO_H_LABEL = LO_HEADER->CREATE_LABEL( ROW = 1 COLUMN = 1 ).
 LO_H_LABEL->SET_TEXT('Y O Y SALES OF ').

 LO_H_LABEL = LO_HEADER->CREATE_LABEL( ROW = 1 COLUMN = 2 ).
 LO_H_LABEL->SET_TEXT( S_GRP ).

 LO_H_LABEL = LO_HEADER->CREATE_LABEL( ROW = 1 COLUMN = 3 ).
 LO_H_LABEL->SET_TEXT(' YEAR : ').

 LO_H_LABEL = LO_HEADER->CREATE_LABEL( ROW = 1 COLUMN = 4 ).
 LO_H_LABEL->SET_TEXT( P_YEAR ).

 LO_H_LABEL = LO_HEADER->CREATE_LABEL( ROW = 1 COLUMN = 5 ).
 LO_H_LABEL->SET_TEXT('MONTH :').

 LO_H_LABEL = LO_HEADER->CREATE_LABEL( ROW = 1 COLUMN = 6 ).
 LO_H_LABEL->SET_TEXT( P_MONTH ).

 IT_TABLE->SET_TOP_OF_LIST( LO_HEADER ).

lo_aggrs = IT_TABLE->get_aggregations( ).
   PERFORM FLD_TOT USING 'MENGE' .
    PERFORM FLD_TOT USING 'NETWR' .
       PERFORM FLD_TOT USING 'MENGE1' .
    PERFORM FLD_TOT USING 'NETWR1' .
       PERFORM FLD_TOT USING 'MENGE2' .
    PERFORM FLD_TOT USING 'NETWR2' .
       PERFORM FLD_TOT USING 'MENGE3' .
    PERFORM FLD_TOT USING 'NETWR3' .
       PERFORM FLD_TOT USING 'MENGE4' .
    PERFORM FLD_TOT USING 'NETWR4' .

IT_TABLE->display( ).


  FORM GRP_F4.

SELECT CLINT
       CLASS
FROM   KLAH
INTO TABLE IT_KLAH
WHERE KLART = '026' AND WWSKZ = '0'.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
*     DDIC_STRUCTURE         = ' '
      RETFIELD               = 'CLASS'
*     PVALKEY                = ' '
     DYNPPROG               = SY-REPID
     DYNPNR                 = SY-DYNNR
     DYNPROFIELD            = 'S_GRP'
*     STEPL                  = 0
*     WINDOW_TITLE           =
*     VALUE                  = ' '
     VALUE_ORG              = 'S'
*     MULTIPLE_CHOICE        = ' '
*     DISPLAY                = ' '
*     CALLBACK_PROGRAM       = ' '
*     CALLBACK_FORM          = ' '
*     CALLBACK_METHOD        =
*     MARK_TAB               =
*   IMPORTING
*     USER_RESET             =
    TABLES
      VALUE_TAB              = IT_KLAH
*     FIELD_TAB              =
*     RETURN_TAB             =
*     DYNPFLD_MAPPING        =
   EXCEPTIONS
     PARAMETER_ERROR        = 1
     NO_VALUES_FOUND        = 2
     OTHERS                 = 3
            .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.



  ENDFORM.



 FORM FLD_TOT USING FIELD TYPE LVC_FNAME.

    TRY.
        CALL METHOD lo_aggrs->add_aggregation
          EXPORTING
            columnname  = FIELD
            aggregation = if_salv_c_aggregation=>total.
      CATCH cx_salv_data_error .                        "#EC NO_HANDLER
      CATCH cx_salv_not_found .                         "#EC NO_HANDLER
      CATCH cx_salv_existing .                          "#EC NO_HANDLER
    ENDTRY.

 ENDFORM.

 FORM VALUE_VALIDATIONS.

 IF S_MATKL-LOW IS NOT INITIAL.

LV_MATKL = S_MATKL-LOW.
   CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
     EXPORTING
       INPUT         = LV_MATKL
    IMPORTING
      OUTPUT        = LV_MATKL
             .
*S_MATKL-LOW = LV_MATKL.

APPEND VALUE #( LOW = LV_MATKL OPTION = 'EQ' SIGN = 'I' ) to S_MATKL[].
 FREE IT_DATA[].
   SELECT KLAH~CLASS
       KLAH~CLINT
       KSSK~OBJEK
       KLAH1~CLASS AS MATKL
INTO TABLE IT_DATA
FROM KLAH AS KLAH INNER JOIN KSSK AS KSSK ON ( KSSK~CLINT EQ KLAH~CLINT )
                  INNER JOIN KLAH AS KLAH1 ON ( KSSK~OBJEK EQ KLAH1~CLINT )
WHERE KLAH~KLART = '026' AND
      KLAH~WWSKZ = '0' AND
      KLAH~CLASS IN S_GRP AND
      KLAH1~CLASS IN S_MATKL.

     IF IT_DATA IS INITIAL.
       FREE S_MATKL[].
       FREE S_GRP[].
       FREE S_MATNR[].
       FREE IT_DATA.
       MESSAGE ' PLEASE ENTER VALID CATEGORY NUMBER' TYPE 'E'.


     ENDIF.
     READ TABLE IT_DATA INTO WA_DATA WITH KEY MATKL = S_MATKL-LOW.
      IF SY-SUBRC NE 0.
       FREE S_MATKL[].
       FREE S_GRP[].
       FREE S_MATNR[].
       FREE IT_DATA[].
*       FREE IT_MARA.
       MESSAGE 'PLEASE ENTER APPROPRIATE CATEGORY NUMBER ' TYPE 'E'.

     ENDIF.

 ENDIF.

IF S_MATNR-LOW IS NOT INITIAL.

 SELECT MATKL
       MATNR
INTO TABLE IT_MARA
FROM MARA
FOR ALL ENTRIES IN IT_DATA
WHERE MATKL EQ IT_DATA-MATKL AND
      MATNR IN S_MATNR.
    READ TABLE IT_MARA INTO WA_MARA WITH KEY MATNR = S_MATNR-LOW.
     IF SY-SUBRC NE 0.
       FREE S_MATKL[].
       FREE S_GRP[].
       FREE S_MATNR[].
*       FREE IT_MARA.
       MESSAGE 'PLEASE ENTER APPROPRIATE CHILD SST NUMBER ' TYPE 'E'.

     ENDIF.
ENDIF.

 ENDFORM.
