*&---------------------------------------------------------------------*
*& Report ZSST_MM_R_032_BWSP
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZSST_MM_R_032_BWSP.

TYPES : BEGIN OF TY_DATA,
          CLASS TYPE KLAH-CLASS,
          CLINT TYPE KLAH-CLINT,
          OBJEK TYPE KSSK-OBJEK,
          MATKL TYPE MARA-MATKL,
        END OF TY_DATA,

        BEGIN OF TY_KLAH,
          CLINT TYPE KLAH-CLINT,
          CLASS TYPE KLAH-CLASS,
        END OF TY_KLAH,

        BEGIN OF TY_MSEG,
          MBLNR TYPE MSEG-MBLNR,
          MJAHR TYPE MSEG-MJAHR,
          ZEILE TYPE MSEG-ZEILE,
          BWART TYPE MSEG-BWART,
          CHARG TYPE MSEG-CHARG,
          MENGE TYPE MSEG-MENGE,
          EBELN TYPE MSEG-EBELN,
          BUDAT_MKPF TYPE MSEG-BUDAT_MKPF,
          MATNR TYPE MSEG-MATNR,
          LIFNR TYPE EKKO-LIFNR,
        END OF TY_MSEG,

         BEGIN OF TY_MSEG1,
          MBLNR TYPE MSEG-MBLNR,
          CHARG TYPE MSEG-CHARG,
*           MENGE TYPE MSEG-MENGE,
           EBELN TYPE MSEG-EBELN,
           MATNR TYPE MSEG-MATNR,
          MG_101 TYPE MSEG-MENGE,
           MG_109 TYPE MSEG-MENGE,
           MG_251 TYPE MSEG-MENGE,
           MG_252 TYPE MSEG-MENGE,
            ZZSTYLE TYPE EKPO-ZZSTYLE,
        END OF TY_MSEG1,

        BEGIN OF TY_EKKO,
          EBELN TYPE EKKO-EBELN,
          LIFNR TYPE EKKO-LIFNR,
          BSART TYPE EKKO-BSART,
          ZZSTYLE TYPE EKPO-ZZSTYLE,
        END OF TY_EKKO,

          BEGIN OF TY_LFA1,
          LIFNR TYPE LFA1-LIFNR,
          NAME1 TYPE LFA1-NAME1,
          ORT01 TYPE LFA1-ORT01,
        END OF TY_LFA1,

        BEGIN OF TY_FINAL,
          CHARG TYPE MSEG-CHARG,
          MBLNR TYPE MSEG-MBLNR,
          EBELN TYPE MSEG-EBELN,
          CLASS TYPE KLAH-CLASS,
          NAME1 TYPE LFA1-NAME1,
          ORT01 TYPE LFA1-ORT01,
           ZZSTYLE TYPE EKPO-ZZSTYLE,
          SUP_QTY TYPE MSEG-MENGE,
          SL_QTY TYPE MSEG-MENGE,
          SALE_DAYS TYPE P0347-SCRDD,
          PER TYPE CHAR4,
        END OF TY_FINAL,

        BEGIN OF TY_MARA,
          MATKL TYPE MARA-MATKL,
          MATNR TYPE MARA-MATNR,
        END OF TY_MARA.

DATA : LV_GROUP_ID TYPE KLAH-CLASS.

DATA : IT_MARA TYPE TABLE OF TY_MARA,
       IT_KLAH TYPE TABLE OF TY_KLAH,
       IT_MSEG TYPE TABLE OF TY_MSEG,
       IT_MSEG2 TYPE TABLE OF TY_MSEG,
       IT_MG TYPE TABLE OF TY_MSEG,
       IT_MSEG1 TYPE TABLE OF TY_MSEG1,
       IT_LFA1 TYPE TABLE OF TY_LFA1,
       IT_FINAL TYPE TABLE OF TY_FINAL,
       IT_EKKO TYPE TABLE OF TY_EKKO,
       IT_TABLE  TYPE REF   TO CL_SALV_TABLE       ,
       IT_DATA TYPE TABLE OF TY_DATA.

DATA : WA_MSEG TYPE TY_MSEG,
       WA_MSEG1 TYPE TY_MSEG1,
       WA_MSEG2 TYPE TY_MSEG,
       WA_MG TYPE TY_MSEG,
       WA_FINAL TYPE TY_FINAL,
       WA_EKKO TYPE TY_EKKO,
       WA_MARA TYPE TY_MARA,
       WA_DATA TYPE TY_DATA,
       WA_LFA1 TYPE TY_LFA1.

DATA : SL_QTY  TYPE MSEG-MENGE,
       PER TYPE INT4,
       PERC TYPE CHAR5,
        DATE1       type P0001-BEGDA,
      DATE2       type P0001-BEGDA,
      DAYS        type P0347-SCRDD.

DATA: LO_HEADER TYPE REF TO CL_SALV_FORM_LAYOUT_GRID,
      LO_H_LABEL TYPE REF TO CL_SALV_FORM_LABEL,
      LO_H_FLOW  TYPE REF TO CL_SALV_FORM_LAYOUT_FLOW,
      LO_FUNCTIONS TYPE REF TO CL_SALV_FUNCTIONS_LIST.

DATA : LR_COLUMNS   TYPE REF TO CL_SALV_COLUMNS_TABLE, "columns instance
       LR_COL       TYPE REF TO CL_SALV_COLUMN_TABLE.

SELECTION-SCREEN : BEGIN OF BLOCK b1 WITH FRAME TITLE TEXT-001.

SELECT-OPTIONS: S_GRP FOR LV_GROUP_ID .


*PARAMETERS : P_GRP TYPE KLAH-CLASS.
SELECTION-SCREEN : END OF BLOCK b1.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR S_GRP-LOW.
** Calling the perform method when the low field of select option pernr's f4 is clicked
  PERFORM GRP_F4.

  AT SELECTION-SCREEN ON VALUE-REQUEST FOR S_GRP-HIGH.
** Calling the perform method when the low field of select option pernr's f4 is clicked
  PERFORM GRP_F4.


START-OF-SELECTION.

SELECT KLAH~CLASS
       KLAH~CLINT
       KSSK~OBJEK
       KLAH1~CLASS AS MATKL
INTO TABLE IT_DATA
FROM KLAH AS KLAH INNER JOIN KSSK AS KSSK ON ( KSSK~CLINT EQ KLAH~CLINT )
                  INNER JOIN KLAH AS KLAH1 ON ( KSSK~OBJEK EQ KLAH1~CLINT )
WHERE KLAH~KLART = '026' AND
      KLAH~WWSKZ = '0' AND
      KLAH~CLASS IN S_GRP.

SELECT MATKL
       MATNR
INTO TABLE IT_MARA
FROM MARA
FOR ALL ENTRIES IN IT_DATA
WHERE MATKL EQ IT_DATA-MATKL.

SELECT MBLNR
       MJAHR
       ZEILE
       BWART
       CHARG
       MENGE
       EBELN
       BUDAT_MKPF
       MATNR
     "  B~LIFNR
FROM MSEG "AS A LEFT OUTER JOIN EKKO AS B ON ( A~EBELN EQ B~EBELN )
INTO TABLE IT_MSEG
FOR ALL ENTRIES IN IT_MARA
WHERE MATNR = IT_MARA-MATNR AND
      BWART IN ('101' , '109' ).

SELECT MBLNR
       MJAHR
       ZEILE
       BWART
       CHARG
       MENGE
       EBELN
       BUDAT_MKPF
       MATNR
     "  B~LIFNR
FROM MSEG "AS A LEFT OUTER JOIN EKKO AS B ON ( A~EBELN EQ B~EBELN )
INTO TABLE IT_MSEG2
FOR ALL ENTRIES IN IT_MARA
WHERE MATNR = IT_MARA-MATNR AND
      BWART IN ( '251' , '252' ).

SELECT A~EBELN
       A~LIFNR
       A~BSART
       B~ZZSTYLE
FROM EKKO AS A INNER JOIN EKPO AS B ON ( A~EBELN EQ B~EBELN )
INTO TABLE IT_EKKO
FOR ALL ENTRIES IN IT_MSEG
WHERE A~EBELN = IT_MSEG-EBELN AND
      BSART NE 'ZUB' AND
      BSART NE 'NB'.


SELECT LIFNR
       NAME1
       ORT01
FROM   LFA1
INTO TABLE IT_LFA1
FOR ALL ENTRIES IN IT_EKKO
WHERE LIFNR EQ IT_EKKO-LIFNR.
*IT_MSEG2[] = IT_MSEG[].

*   LOOP AT IT_MSEG INTO WA_MSEG WHERE CHARG = WA_MG-CHARG AND MATNR = WA_MG-MATNR." AND EBELN = WA_MG-EBELN.
**    CASE WA_MSEG-BWART.
**           WHEN '251'.
**        MOVE WA_MSEG-MENGE TO WA_MSEG1-MG_251.
**           WHEN '252'.
**        MOVE WA_MSEG-MENGE TO WA_MSEG1-MG_252.
**         WHEN OTHERS.
**           MOVE WA_MSEG-MENGE TO WA_MSEG1-MENGE.
**         ENDCASE.
*
*
*   IF WA_MSEG-BWART EQ '251'.
*     MOVE WA_MSEG-MENGE TO WA_MSEG1-MG_251.
*   ELSEIF WA_MSEG-BWART EQ '252'.
*      MOVE WA_MSEG-MENGE TO WA_MSEG1-MG_252.
*   ELSEIF WA_MSEG-BWART EQ '101'.
*      MOVE WA_MSEG-MENGE TO WA_MSEG1-MG_101.
*      ELSEIF WA_MSEG-BWART EQ '109'.
*      MOVE WA_MSEG-MENGE TO WA_MSEG1-MG_109.
*    ENDIF.
*    MOVE WA_MSEG-CHARG TO WA_MSEG1-CHARG.
*    MOVE WA_MSEG-MBLNR TO WA_MSEG1-MBLNR.
*    MOVE WA_MSEG-EBELN TO WA_MSEG1-EBELN.
*   MOVE WA_MSEG-MATNR TO WA_MSEG1-MATNR.
*   APPEND WA_MSEG1 TO IT_MSEG1.
*   CLEAR :WA_MSEG,
*          WA_MSEG1.
*  ENDLOOP.
*    READ TABLE IT_MSEG INTO WA_MSEG WITH KEY CHARG = WA_MG-CHARG  MATNR = WA_MG-MATNR.


     LOOP AT IT_MSEG INTO WA_MSEG .
        MOVE WA_MSEG-CHARG TO WA_MSEG1-CHARG.
     MOVE WA_MSEG-MBLNR TO WA_MSEG1-MBLNR.
     MOVE WA_MSEG-EBELN TO WA_MSEG1-EBELN.
     MOVE WA_MSEG-MATNR TO WA_MSEG1-MATNR.
     CASE WA_MSEG-BWART.
           WHEN '101'.
        MOVE WA_MSEG-MENGE TO WA_MSEG1-MG_101.
           WHEN '109'.
        MOVE WA_MSEG-MENGE TO WA_MSEG1-MG_109.
*         WHEN OTHERS.
*           MOVE WA_MSEG-MENGE TO WA_MSEG1-MENGE.
         ENDCASE.
      READ TABLE IT_MSEG2 INTO WA_MSEG2 WITH KEY CHARG = WA_MSEG-CHARG MATNR = WA_MSEG-MATNR.
      IF SY-SUBRC = 0.
          CASE WA_MSEG2-BWART.
           WHEN '251'.
        MOVE WA_MSEG2-MENGE TO WA_MSEG1-MG_251.
           WHEN '252'.
        MOVE WA_MSEG2-MENGE TO WA_MSEG1-MG_252.
*         WHEN OTHERS.
*           MOVE WA_MSEG-MENGE TO WA_MSEG1-MENGE.
         ENDCASE.
      ENDIF.
      APPEND WA_MSEG1 TO IT_MSEG1.
   CLEAR :WA_MSEG,
          WA_MSEG1,
          WA_MSEG2.
     ENDLOOP.
SORT IT_MSEG BY CHARG.
  IT_MG[] = IT_MSEG[].
  DELETE ADJACENT DUPLICATES FROM IT_MG COMPARING CHARG.
  LOOP AT IT_MG INTO WA_MG.
*    READ TABLE IT_MSEG INTO WA_MSEG WITH KEY EBELN = WA_EKKO-EBELN.
*    IF SY-SUBRC = 0.

    MOVE WA_MG-CHARG TO WA_FINAL-CHARG.
    MOVE WA_MG-MBLNR TO WA_FINAL-MBLNR.
    MOVE WA_MG-EBELN TO WA_FINAL-EBELN.
    READ TABLE IT_EKKO INTO WA_EKKO WITH KEY EBELN = WA_MG-EBELN.
    IF SY-SUBRC = 0.

    MOVE WA_EKKO-ZZSTYLE TO WA_FINAL-ZZSTYLE.
     ENDIF.
*    MOVE WA_MG-ZZSTYLE TO WA_FINAL-ZZSTYLE.
*    ENDIF.
*    READ TABLE IT_MSEG1 INTO WA_MSEG1 WITH KEY EBELN = WA_EKKO-EBELN.
*    IF SY-SUBRC = 0.
   LOOP AT IT_MSEG1 INTO WA_MSEG1 WHERE CHARG = WA_MG-CHARG AND MATNR = WA_MG-MATNR .
      WA_FINAL-SUP_QTY = WA_FINAL-SUP_QTY + WA_MSEG1-MG_101 + WA_MSEG1-MG_109.
*      MOVE WA_MSEG1-MENGE TO WA_FINAL-SUP_QTY.
      SL_QTY = WA_MSEG1-MG_251 - WA_MSEG1-MG_252.
      WA_FINAL-SL_QTY = WA_FINAL-SL_QTY + SL_QTY .
      CLEAR: SL_QTY.

*    ENDIF.
    ENDLOOP.
    READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_EKKO-LIFNR.
    IF SY-SUBRC = 0.
      MOVE WA_LFA1-NAME1 TO WA_FINAL-NAME1.
      MOVE WA_LFA1-ORT01 TO WA_FINAL-ORT01.
    ENDIF.

    READ TABLE IT_MARA INTO WA_MARA WITH KEY MATNR = WA_MG-MATNR.
    READ TABLE IT_DATA INTO WA_DATA WITH KEY MATKL = WA_MARA-MATKL.
    IF SY-SUBRC = 0.
      MOVE WA_DATA-CLASS TO WA_FINAL-CLASS.
    ENDIF.
    IF WA_FINAL-SUP_QTY IS NOT INITIAL.
    PER = ( WA_FINAL-SL_QTY / WA_FINAL-SUP_QTY ) * 100 .
    ENDIF.
    PERC = PER.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT         = PERC
     IMPORTING
       OUTPUT        = PERC
              .

    CONCATENATE PERC '%' INTO WA_FINAL-PER.

date1 = sy-datum .
date2 = wa_MG-BUDAT_MKPF.
if date2 IS NOT INITIAL.
CALL FUNCTION 'HR_HK_DIFF_BT_2_DATES'                                                     "ADDED BY KRITHIKA
  EXPORTING
    DATE1                             = date1
    DATE2                             = date2
   OUTPUT_FORMAT                      = '03'
 IMPORTING
*   YEARS                             =
*   MONTHS                            =
   DAYS                               = days
* EXCEPTIONS
*   OVERFLOW_LONG_YEARS_BETWEEN       = 1
*   INVALID_DATES_SPECIFIED           = 2
*   OTHERS                            = 3
          .
IF SY-SUBRC <> 0.
* Implement suitable error handling here
ENDIF.
    WA_FINAL-SALE_DAYS = DAYS .
ENDIF.
IF WA_MG-BWART NE '251' OR WA_MG-BWART NE '252'.
    APPEND WA_FINAL TO IT_FINAL.
ENDIF.
    CLEAR : WA_FINAL,
            WA_LFA1,
            WA_MSEG.

  ENDLOOP.

  IF IT_FINAL IS NOT INITIAL.

  TRY.
      CALL METHOD CL_SALV_TABLE=>FACTORY "get SALV factory instance
        EXPORTING
          LIST_DISPLAY = IF_SALV_C_BOOL_SAP=>FALSE
*         R_CONTAINER  =
*         CONTAINER_NAME =
        IMPORTING
          R_SALV_TABLE = IT_TABLE
        CHANGING
          T_TABLE      = IT_FINAL.

LO_FUNCTIONS = IT_TABLE->GET_FUNCTIONS( ).
    LO_FUNCTIONS->SET_DEFAULT( ABAP_TRUE ).
      CREATE OBJECT LO_HEADER.
*----------------------------------------------------------------------*
* To create a Label or Flow we have to specify the target
* row and column number where we need to set up the output
* text.
*----------------------------------------------------------------------*
* Information in Bold

    LO_H_LABEL = LO_HEADER->CREATE_LABEL( ROW = 1 COLUMN = 1 ).
    LO_H_LABEL->SET_TEXT('BATCH WISE / GROUP WISE SALES PERFORMANCE').

    IT_TABLE->SET_TOP_OF_LIST( LO_HEADER ).

   LR_columns = IT_table->get_columns( ).

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'CHARG' ).
LR_COL->set_long_text( 'BATCH No.' ).
CLEAR: LR_COL.

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'MBLNR' ).
LR_COL->set_long_text( 'GROUPPO No.' ).
LR_COL->set_SHORT_text( 'GRPO No.' ).
CLEAR: LR_COL.

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'EBELN' ).
LR_COL->set_long_text( 'PO No.' ).
CLEAR: LR_COL.

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'CLASS' ).
LR_COL->set_long_text( 'GROUP NAME' ).
CLEAR: LR_COL.


LR_COL ?= LR_COLUMNS->GET_COLUMN( 'NAME1' ).
LR_COL->set_long_text( 'VENDOR NAME' ).
CLEAR: LR_COL.

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'ORT01' ).
LR_COL->set_long_text( 'LOCATION' ).
CLEAR: LR_COL.

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'ZZSTYLE' ).
LR_COL->set_long_text( 'STYLE CODE' ).
CLEAR: LR_COL.

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'SUP_QTY' ).
LR_COL->set_long_text( 'SUPPLIED QTY' ).
CLEAR: LR_COL.

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'SL_QTY' ).
LR_COL->set_long_text( 'SOLD QTY' ).
CLEAR: LR_COL.

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'SALE_DAYS' ).
LR_COL->set_long_text( 'No OF SALE DAYS' ).
LR_COL->set_SHORT_text( 'SALEDAYS' ).
CLEAR: LR_COL.

LR_COL ?= LR_COLUMNS->GET_COLUMN( 'PER' ).
LR_COL->set_long_text( 'SALE%' ).
CLEAR: LR_COL.


 CATCH CX_SALV_MSG .
  ENDTRY.
 IT_TABLE->DISPLAY( ).
ENDIF.

  FORM GRP_F4.

SELECT CLINT
       CLASS
FROM   KLAH
INTO TABLE IT_KLAH
WHERE KLART = '026' AND WWSKZ = '0'.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
*     DDIC_STRUCTURE         = ' '
      RETFIELD               = 'CLASS'
*     PVALKEY                = ' '
     DYNPPROG               = SY-REPID
     DYNPNR                 = SY-DYNNR
     DYNPROFIELD            = 'S_GRP'
*     STEPL                  = 0
*     WINDOW_TITLE           =
*     VALUE                  = ' '
     VALUE_ORG              = 'S'
*     MULTIPLE_CHOICE        = ' '
*     DISPLAY                = ' '
*     CALLBACK_PROGRAM       = ' '
*     CALLBACK_FORM          = ' '
*     CALLBACK_METHOD        =
*     MARK_TAB               =
*   IMPORTING
*     USER_RESET             =
    TABLES
      VALUE_TAB              = IT_KLAH
*     FIELD_TAB              =
*     RETURN_TAB             =
*     DYNPFLD_MAPPING        =
   EXCEPTIONS
     PARAMETER_ERROR        = 1
     NO_VALUES_FOUND        = 2
     OTHERS                 = 3
            .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  ENDFORM.
