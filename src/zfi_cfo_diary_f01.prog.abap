*&---------------------------------------------------------------------*
*& Include          ZACCOUNTANT_DIARY_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form GET_DATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM GET_DATA.

  DATA :
    R_DATE       TYPE RANGE OF SY-DATUM,
    LV_TO_DATE   TYPE SY-DATUM,
    LV_FROM_DATE TYPE SY-DATUM.

  CONSTANTS :
    C_I(1)  VALUE 'I',
    C_OP(2) VALUE 'BT'.

  IF  P_MONTH IS INITIAL AND P_YEAR IS INITIAL.
    MESSAGE S006(ZMSG_CLS) DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.
  DATA : LV_NUMBER_OF_DAYS TYPE T009B-BUTAG.

  CALL FUNCTION 'NUMBER_OF_DAYS_PER_MONTH_GET'
    EXPORTING
      PAR_MONTH = P_MONTH
      PAR_YEAR  = P_YEAR
    IMPORTING
      PAR_DAYS  = LV_NUMBER_OF_DAYS.
  IF SY-SUBRC <> 0.
*   MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*     WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
*  BREAK BREDDY.
  LV_TO_DATE = P_YEAR && P_MONTH && LV_NUMBER_OF_DAYS.
  LV_FROM_DATE =  LV_TO_DATE - 212.
  APPEND VALUE #( SIGN = C_I OPTION = C_OP LOW = LV_FROM_DATE HIGH = LV_TO_DATE ) TO R_DATE.
*  SELECT
*    EKBE~EBELN,
*    EKBE~EBELP,
*    EKBE~BEWTP,
*    EKBE~BELNR,
*    EKBE~GJAHR,
*    EKBE~BUDAT ,
*    EKKO~BSART ,
*    EKKO~LOEKZ ,
*    EKKO~AEDAT ,
*    EKKO~LIFNR ,
*    EKKO~WAERS ,
*    EKKO~ZTERM ,
*    EKKO~ZBD1T ,
*    ZINW_T_HDR~QR_CODE,
*    ZINW_T_HDR~NAME1,
*    ZINW_T_HDR~STATUS,
*    ZINW_T_HDR~SOE ,
*    ZINW_T_HDR~MBLNR_103 ,
*    ZINW_T_HDR~MBLNR ,
*    ZINW_T_HDR~INWD_DOC ,
*    ZINW_T_ITEM~MATNR ,
*    ZINW_T_ITEM~MATKL ,
*    ZINW_T_ITEM~NETPR_P ,
*    ZINW_T_ITEM~NETWR_P + ZINW_T_ITEM~NETPR_GP AS NETWR_P ,
*    ZINW_T_ITEM~NETPR_GP,
*    ZINW_T_ITEM~MENGE_P,
*    EKBE~BUDAT AS DUE_DATE
*    INTO TABLE @DATA(TEST)
*    FROM  EKBE AS EKBE
*    INNER JOIN ZINW_T_HDR AS ZINW_T_HDR ON EKBE~BELNR = ZINW_T_HDR~MBLNR
*    INNER JOIN ZINW_T_ITEM AS ZINW_T_ITEM ON ZINW_T_ITEM~QR_CODE = ZINW_T_HDR~QR_CODE
*    INNER JOIN EKKO AS EKKO ON EKKO~EBELN = ZINW_T_HDR~EBELN
*    INNER JOIN EKPO AS EKPO ON EKBE~EBELN = EKPO~EBELN AND  EKBE~EBELP = EKPO~EBELP
*    WHERE  EKKO~BSART IN ( 'ZLOP' , 'ZOSP' , 'ZTAT' )
*    AND EKBE~EBELN = '4600001540'
*    AND ZINW_T_HDR~SOE <> ' ' AND EKBE~BUDAT IN @R_DATE AND EKKO~LOEKZ <> @C_X AND EKBE~BEWTP IN ( 'Q' , 'E' )." AND EKBE~BWART IN ( '107' , '101', ' ' ) .
  BREAK BREDDY.
  SELECT
    EKBE~EBELN,
    EKBE~EBELP,
    EKBE~BEWTP,
    EKBE~BWART,
    EKBE~MENGE,
    EKBE~BELNR,
    EKBE~GJAHR,
    EKBE~BUDAT,
    EKBE~LFBNR,
    EKKO~BSART,
    EKKO~LOEKZ,
    EKKO~AEDAT,
    EKKO~LIFNR,
    EKKO~WAERS,
    EKKO~ZTERM,
    EKKO~ZBD1T,
    ZINW_T_HDR~QR_CODE,
    ZINW_T_HDR~NAME1,
    ZINW_T_HDR~STATUS,
    ZINW_T_HDR~SOE ,
    ZINW_T_HDR~BILL_NUM ,
    ZINW_T_HDR~MBLNR_103 ,
    ZINW_T_HDR~MBLNR ,
    ZINW_T_HDR~INWD_DOC ,
    ZINW_T_HDR~RETURN_PO ,
    ZINW_T_HDR~BILL_DATE ,
*    ZINW_T_HDR~LR_NO,
    ZINW_T_ITEM~MATNR ,
    ZINW_T_ITEM~MATKL ,
    ZINW_T_ITEM~NETPR_P ,
    ZINW_T_ITEM~NETWR_P + ZINW_T_ITEM~NETPR_GP AS NETWR_P ,
    ZINW_T_ITEM~NETPR_GP,
    ZINW_T_ITEM~MENGE_P,
*    MKPF~BUDAT,
    EKBE~BUDAT AS DUE_DATE
*    EKBE~BELNR AS BELNR1
    INTO TABLE @GT_DATA
    FROM  EKBE AS EKBE
    INNER JOIN ZINW_T_HDR AS ZINW_T_HDR ON EKBE~BELNR = ZINW_T_HDR~MBLNR
    INNER JOIN ZINW_T_ITEM AS ZINW_T_ITEM ON ZINW_T_ITEM~QR_CODE = ZINW_T_HDR~QR_CODE AND ZINW_T_ITEM~EBELN = EKBE~EBELN AND ZINW_T_ITEM~EBELP = EKBE~EBELP
    INNER JOIN EKKO AS EKKO ON EKKO~EBELN = ZINW_T_HDR~EBELN
*    INNER JOIN MKPF AS MKPF ON MBLNR = ZINW_T_HDR~MBLNR
    LEFT OUTER JOIN EKPO AS EKPO ON EKPO~EBELN = ZINW_T_HDR~RETURN_PO
*    LEFT OUTER JOIN EKBE AS EKBE ON EKBE~BEWTP IN ( 'Q' , 'E' )
    WHERE  EKKO~BSART IN ( 'ZLOP' , 'ZOSP' , 'ZTAT' )
*    AND EKBE~EBELN = '4500000550'
    AND ZINW_T_HDR~SOE <> ' ' AND EKBE~BUDAT IN @R_DATE AND EKKO~LOEKZ <> @C_X  AND EKBE~BWART IN ( '109' , '101', ' ' ) AND EKBE~BEWTP = 'E' .
*  BREAK BREDDY.
  SORT GT_DATA BY EBELN EBELP BELNR.
  DELETE ADJACENT DUPLICATES FROM GT_DATA COMPARING EBELN EBELP BELNR.
  IF GT_DATA IS NOT INITIAL.
    SELECT * FROM EKPO INTO TABLE IT_EKPO FOR ALL ENTRIES IN GT_DATA WHERE EBELN = GT_DATA-RETURN_PO .
  ENDIF.
  TYPES  : BEGIN OF TY_AWKEY  ,
             AWKEY TYPE BKPF-AWKEY,
           END OF TY_AWKEY .
  DATA : IT_AWKEY  TYPE TABLE OF TY_AWKEY,
         IT_AWKEY1 TYPE TABLE OF TY_AWKEY,
         WA_AWKEY1 TYPE TY_AWKEY,
         WA_AWKEY  TYPE TY_AWKEY.

*  DATA(IT_DATA) = GT_DATA[].
*  DATA : LV_AWKEY(20) TYPE C.

*** Invoice Records
  SELECT EKBE~EBELN,
         EKBE~EBELP,
         EKBE~BEWTP,
         EKBE~BELNR ,
         EKBE~GJAHR,
         EKBE~BUDAT,
         EKBE~LFBNR
         FROM EKBE INTO TABLE @DATA(GT_DATA_INV) FOR ALL ENTRIES IN @GT_DATA WHERE EBELN = @GT_DATA-EBELN AND EBELP = @GT_DATA-EBELP AND BEWTP = 'Q'.
*** For Date Wise
  DELETE GT_DATA_INV WHERE BEWTP <> 'Q'.

  LOOP AT GT_DATA_INV ASSIGNING FIELD-SYMBOL(<GS_DATA_INV>).
    WA_AWKEY-AWKEY = <GS_DATA_INV>-BELNR && <GS_DATA_INV>-GJAHR.                              ""GS_DATA-BELNR && GS_DATA-GJAHR.

    APPEND WA_AWKEY TO IT_AWKEY .
    CLEAR WA_AWKEY .
  ENDLOOP.



*  SELECT MSEG~MBLNR, MSEG~MJAHR FROM MSEG INTO TABLE  @DATA(GT_MSEG) FOR ALL ENTRIES IN @GT_DATA_INV WHERE LFBNR = @GT_DATA_INV-LFBNR AND BWART = '109'.

*  LOOP AT GT_MSEG ASSIGNING FIELD-SYMBOL(<GS_MSEG>).
*    WA_AWKEY1-AWKEY = <GS_MSEG>-MBLNR && <GS_MSEG>-MJAHR.
*    APPEND WA_AWKEY1 TO IT_AWKEY1.
*    CLEAR WA_AWKEY.
*  ENDLOOP.

*  IF IT_AWKEY1 IS NOT INITIAL.
*  SELECT BKPF~BELNR  ,
*        BKPF~BUKRS  ,
*        BKPF~GJAHR  ,
*        BKPF~AWKEY  FROM BKPF INTO TABLE @DATA(IT_BKPF1) FOR ALL ENTRIES IN @IT_AWKEY1 WHERE AWKEY = @IT_AWKEY1-AWKEY.
**  ENDIF.

*  IF IT_BKPF1 IS NOT INITIAL.
*
*    SELECT BSEG~BUKRS ,
*             BSEG~BELNR ,
*             BSEG~GJAHR ,
*             BSEG~AUGBL FROM BSEG INTO TABLE @DATA(IT_BSEG1) FOR ALL ENTRIES IN @IT_BKPF1
*            WHERE  BUKRS = @IT_BKPF1-BUKRS AND BELNR = @IT_BKPF1-BELNR
*            AND GJAHR = @IT_BKPF1-GJAHR AND AUGBL  <> @SPACE AND BSCHL = '31' " CLEARING DOCUMNET
*            AND BUZID = ' ' .
*  ENDIF.

  IF IT_AWKEY IS NOT INITIAL.
    SELECT BKPF~BELNR  ,
           BKPF~BUKRS  ,
           BKPF~GJAHR  ,
           BKPF~AWKEY  FROM BKPF INTO TABLE @DATA(IT_BKPF) FOR ALL ENTRIES IN @IT_AWKEY
            WHERE AWKEY  = @IT_AWKEY-AWKEY .
  ENDIF.
  IF IT_BKPF IS NOT INITIAL .
    SELECT BSEG~BUKRS ,
           BSEG~BELNR ,
           BSEG~GJAHR ,
           BSEG~AUGBL
         FROM BSEG INTO TABLE @DATA(IT_BSEG) FOR ALL ENTRIES IN @IT_BKPF
         WHERE  BUKRS = @IT_BKPF-BUKRS AND BELNR = @IT_BKPF-BELNR
         AND GJAHR = @IT_BKPF-GJAHR AND AUGBL  <> @SPACE AND BSCHL = '31' " CLEARING DOCUMNET
         AND BUZID = ' ' . " WITH TAX AMOUNT
  ENDIF.


*  SELECT  BELNR FROM BKPF INTO TABLE IT_BKPF FOR ALL ENTRIES IN IT_DATA WHERE AWKEY = IT_DATA-BELNR1.

*  IF IT_BKPF IS NOT INITIAL .
*
*    SELECT BELNR AUGBL FROM BSEG INTO TABLE IT_BSEG FOR ALL ENTRIES IN IT_BKPF WHERE BELNR = IT_BKPF-BELNR.
*
*  ENDIF.
*
*
  IF IT_EKPO IS NOT INITIAL.
    SELECT * FROM A003 INTO TABLE IT_A003 FOR ALL ENTRIES IN IT_EKPO WHERE MWSKZ = IT_EKPO-MWSKZ.
  ENDIF.

  IF IT_A003 IS NOT INITIAL.
    SELECT * FROM KONP INTO TABLE IT_KONP FOR ALL ENTRIES IN IT_A003 WHERE KNUMH = IT_A003-KNUMH.
  ENDIF.

*
*  SORT GT_DATA BY MBLNR EBELN MATNR.
*  DELETE ADJACENT DUPLICATES FROM GT_DATA COMPARING MBLNR EBELN MATNR.
*  DELETE GT_DATA WHERE MBLNR <> '5000000836'.
*** For Calculating Due Date
  IF  GT_DATA IS NOT INITIAL.         "" IF SY-SUBRC = 0 AND
    LOOP AT GT_DATA ASSIGNING FIELD-SYMBOL(<LS_DATA>).
      <LS_DATA>-DUE_DATE = <LS_DATA>-BUDAT +  <LS_DATA>-ZBD1T.
    ENDLOOP.
  ENDIF.
  DELETE GT_DATA WHERE DUE_DATE GT LV_TO_DATE.
  IF GT_DATA IS INITIAL.
    MESSAGE | No Payment pending for month  { P_MONTH } { P_YEAR } | TYPE 'S' DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.
**** Invoice Records
*  SELECT EKBE~EBELN,
*  EKBE~EBELP,
*  EKBE~BEWTP,
*  EKBE~BELNR ,
*  EKBE~GJAHR,
*  EKBE~BUDAT,
*  EKBE~LFBNR
*     FROM EKBE INTO TABLE @DATA(GT_DATA_INV) FOR ALL ENTRIES IN @GT_DATA WHERE EBELN = @GT_DATA-EBELN AND EBELP = @GT_DATA-EBELP AND BEWTP = 'Q'.
**** For Date Wise
*  DELETE GT_DATA_INV WHERE BEWTP <> 'Q'.

*  LOOP AT GT_DATA_INV ASSIGNING FIELD-SYMBOL(<LS_DATA_INV>).
*    LOOP AT GT_DATA ASSIGNING <LS_DATA> WHERE EBELN = <LS_DATA_INV>-EBELN AND EBELP = <LS_DATA_INV>-EBELP AND LFBNR = <LS_DATA_INV>-LFBNR.
*      IF SY-SUBRC = 0.
****   Marking X to delete
*        <LS_DATA>-DUE_DATE = C_X.
*      ENDIF.
*    ENDLOOP.
*  ENDLOOP.

*** Deleting the Invoice Records
*  DELETE GT_DATA WHERE DUE_DATE = C_X.
*** For Date Wise
  DATA(GT_DATA_DATE) = GT_DATA.
  SORT GT_DATA_DATE BY DUE_DATE.
  DATA : LV_TAX TYPE EKPO-NETPR .
  DATA : LV_RETURN TYPE EKPO-NETPR .
*  DELETE ADJACENT DUPLICATES FROM GT_DATA_DATE COMPARING DUE_DATE.

  DATA(LV_START_DATE) = P_YEAR && P_MONTH && '01'.
  REFRESH : GT_FINAL1.
  DATA : LV_OFF(10)     TYPE C,
         LV_OFF1(10)    TYPE C,
         LV_STRING(15)  TYPE C,
         LV_STRING1(15) TYPE C.
  BREAK BREDDY.

*  LOOP AT IT_BSEG1 ASSIGNING FIELD-SYMBOL(<LS_BSEG1>).
*    READ TABLE IT_BKPF1 ASSIGNING FIELD-SYMBOL(<LS_BKPF1>) WITH KEY BELNR = <LS_BSEG1>-BELNR BUKRS =  <LS_BSEG1>-BUKRS.
*    LV_STRING1 = <LS_BKPF1>-AWKEY.
*    LV_OFF1 = LV_STRING+0(10).
*    LOOP AT GT_DATA_INV ASSIGNING FIELD-SYMBOL(<LS_DAT1>) WHERE BELNR = LV_OFF1.
*      READ TABLE GT_DATA  ASSIGNING FIELD-SYMBOL(<LS_DEL1>) WITH KEY BELNR = <LS_DAT1>-LFBNR.
*      IF SY-SUBRC = 0.
*        DELETE GT_DATA WHERE BELNR = <LS_DAT1>-LFBNR.
*      ENDIF.
*    ENDLOOP.
*  ENDLOOP.

  LOOP AT IT_BSEG ASSIGNING FIELD-SYMBOL(<LS_BSEG>) .

    READ TABLE IT_BKPF ASSIGNING FIELD-SYMBOL(<LS_BKPF>) WITH KEY BELNR = <LS_BSEG>-BELNR BUKRS =  <LS_BSEG>-BUKRS.
    LV_STRING = <LS_BKPF>-AWKEY.
    LV_OFF = LV_STRING+0(10).
    LOOP AT GT_DATA_INV ASSIGNING FIELD-SYMBOL(<LS_DAT>) WHERE BELNR = LV_OFF.

      READ TABLE GT_DATA  ASSIGNING FIELD-SYMBOL(<LS_DEL>) WITH KEY LFBNR = <LS_DAT>-LFBNR.
      IF SY-SUBRC = 0.
        DELETE GT_DATA WHERE LFBNR = <LS_DAT>-LFBNR.
      ENDIF.

    ENDLOOP.
*    APPEND <LS_DEL> TO GT_DATA.
  ENDLOOP.




  DO LV_NUMBER_OF_DAYS TIMES.
*    LOOP AT IT_BSEG ASSIGNING FIELD-SYMBOL(<Ls_BSEG>) .
*      READ TABLE IT_BKPF ASSIGNING FIELD-SYMBOL(<LS_BKPF>) WITH KEY BELNR = <LS_BSEG>-BELNR BUKRS =  <LS_BSEG>-BUKRS.
*      LV_STRING = <LS_BKPF>-AWKEY.
*      LV_OFF = LV_STRING+0(10).
    LOOP AT GT_DATA ASSIGNING <LS_DATA> WHERE DUE_DATE = LV_START_DATE . ""AND MBLNR = LV_STRING.
**        READ TABLE GT_DATA_INV ASSIGNING FIELD-SYMBOL(<LS_DAT>) WITH KEY LFBNR = <LS_DATA>-BELNR.
*        IF SY-SUBRC = 0.
*
*        ENDIF.
*      IF <ls_data>-belnr = lv_string.
*        delete <ls_data>-netwr_p .
*      ENDIF.

      IF <LS_DATA>-BWART = '109'.
*          DATA(LV_AMOUNT) = ( <LS_DATA>-MENGE * <LS_DATA>-NETPR_P ) + ( ( <LS_DATA>-NETPR_GP / <LS_DATA>-MENGE_P ) * <LS_DATA>-MENGE ).
        LV_AMOUNT =  ( <LS_DATA>-NETWR_P / <LS_DATA>-MENGE_P ) * <LS_DATA>-MENGE .
        ADD LV_AMOUNT TO GS_FINAL1-AMOUNT.
      ELSE.
        ADD <LS_DATA>-NETWR_P TO GS_FINAL1-AMOUNT.
      ENDIF.

*        LOOP AT IT_DATA ASSIGNING FIELD-SYMBOL(<LS_DATA>).
*          LOOP AT IT_BSEG INTO WA_BSEG.
*            READ TABLE IT_BKPF INTO WA_BKPF WITH KEY AWKEY = <LS_DATA>-BELNR.
*            READ TABLE IT_EKBE INTO WA_EKBE WITH KEY BELNR = <LS_DATA>-BELNR.
*            IF SY-SUBRC = 0.
*              DELETE GT_DATA-EBELN .
*            ENDIF.
*          ENDLOOP.
      GS_FINAL1-MBLNR = <LS_DATA>-BELNR.
    ENDLOOP.
*      READ TABLE GT_DATA ASSIGNING FIELD-SYMBOL(<LS_DAT>) WITH KEY BELNR = LV_STRING.   ""WITH KEY DUE_DATE = LV_START_DATE.
*      IF SY-SUBRC = 0.
*        DELETE gt_data.
*      ENDIF.
*    ENDLOOP.

    GS_FINAL1-AMOUNT = GS_FINAL1-AMOUNT - LV_RETURN .
    GS_FINAL1-SLNO = SY-INDEX.
    GS_FINAL1-DATE = LV_START_DATE+6(2) && '.' && LV_START_DATE+4(2) && '.' && LV_START_DATE+0(4).
    GS_FINAL1-CURRENCY = 'INR'.
    APPEND GS_FINAL1 TO GT_FINAL1.
    CLEAR : GS_FINAL1.
    LV_START_DATE = LV_START_DATE + 1.
  ENDDO.
*  READ TABLE GT_FINAL1 ASSIGNING FIELD-SYMBOL(<gs_pay>).
*  IF <gs_pay>-mblnr = lv_string.
*
*  ENDIF.

***  Return PO Values
  BREAK SAMBURI.
  DATA(GT_DATA_RPO) = GT_DATA .
  SORT GT_DATA_RPO BY RETURN_PO.
  DELETE GT_DATA_RPO WHERE RETURN_PO IS INITIAL.
  DELETE ADJACENT DUPLICATES FROM GT_DATA_RPO COMPARING RETURN_PO.
  LOOP AT GT_FINAL1 ASSIGNING FIELD-SYMBOL(<LS_FINAL1>).
    LV_START_DATE = <LS_FINAL1>-DATE+6(4) && <LS_FINAL1>-DATE+3(2) && <LS_FINAL1>-DATE+0(2).
    CLEAR : LV_RETURN.
    LOOP AT GT_DATA_RPO ASSIGNING <LS_DATA> WHERE DUE_DATE = LV_START_DATE.
      LOOP AT IT_EKPO ASSIGNING FIELD-SYMBOL(<WA_RET>) WHERE EBELN = <LS_DATA>-RETURN_PO .
        LOOP AT IT_A003 ASSIGNING FIELD-SYMBOL(<WA_A003>) WHERE MWSKZ = <WA_RET>-MWSKZ  .
          LOOP AT IT_KONP ASSIGNING FIELD-SYMBOL(<WA_KONP>) WHERE KNUMH = <WA_A003>-KNUMH .
            CASE <WA_KONP>-KSCHL.
              WHEN 'JIIG'.
                LV_TAX = LV_TAX + ( ( <WA_RET>-NETWR *  ( <WA_KONP>-KBETR / 10 ) ) / 100 ) .
              WHEN 'JICG'.
                LV_TAX = LV_TAX + ( ( <WA_RET>-NETWR *  ( <WA_KONP>-KBETR / 10 ) ) / 100 ) .
              WHEN 'JISG'.
                LV_TAX = LV_TAX + ( ( <WA_RET>-NETWR *  ( <WA_KONP>-KBETR / 10 ) ) / 100 ) .
            ENDCASE.
          ENDLOOP.
        ENDLOOP.
        LV_RETURN = LV_RETURN + <WA_RET>-NETWR + LV_TAX .
        CLEAR LV_TAX.
      ENDLOOP.
    ENDLOOP.
    <LS_FINAL1>-AMOUNT = <LS_FINAL1>-AMOUNT - LV_RETURN.
  ENDLOOP.




ENDFORM.
*&---------------------------------------------------------------------*
*& Form DISPLAY_DATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM DISPLAY_DATA.
*** Field Catlog
  DATA:
    WLAYO	TYPE SLIS_LAYOUT_ALV,
    WFCAT TYPE SLIS_FIELDCAT_ALV,
    TFCAT TYPE SLIS_T_FIELDCAT_ALV,
    WVARI TYPE DISVARIANT.

  WVARI-REPORT    = SY-REPID.
  WVARI-USERNAME  = SY-UNAME.

  WLAYO-ZEBRA       = ABAP_TRUE.
  WLAYO-COLWIDTH_OPTIMIZE  = ABAP_TRUE.
*  WLAYO-    = 'D'.

*** Field Catlog
  REFRESH TFCAT.
  WFCAT-FIELDNAME   = 'SLNO'.
  WFCAT-SELTEXT_L   = 'SLNO'.
  WFCAT-OUTPUTLEN   = 4.
*  WFCAT-REF_TABNAME = 'GT_FINAL1'.
  APPEND WFCAT TO TFCAT.
  CLEAR WFCAT.

  WFCAT-FIELDNAME   = 'DATE'.
  WFCAT-SELTEXT_L   = 'Due Date'.
*  WFCAT-REF_TABNAME = 'GT_FINAL1'.
  APPEND WFCAT TO TFCAT.
  CLEAR WFCAT.

  WFCAT-FIELDNAME   = 'AMOUNT'.
  WFCAT-SELTEXT_L   = 'Amount'.
*  WFCAT-REF_TABNAME = 'GT_FINAL1'.
*  WFCAT-REF_FIELDNAME  = 'NETWR'.
  WFCAT-DO_SUM       = 'X'.

  APPEND WFCAT TO TFCAT.
  CLEAR WFCAT.

  WFCAT-FIELDNAME = 'CURRENCY'.
  WFCAT-SELTEXT_L = 'Currency'.
*  WFCAT-REF_TABNAME = 'GT_FINAL1'.
  APPEND WFCAT TO TFCAT.
  CLEAR WFCAT.

*** Dispalying ALV Report

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      I_CALLBACK_PROGRAM      = SY-REPID
      I_CALLBACK_USER_COMMAND = 'USER_COMMAND'
      IS_LAYOUT               = WLAYO
      IT_FIELDCAT             = TFCAT
      I_SAVE                  = 'U'
      IS_VARIANT              = WVARI
    TABLES
      T_OUTTAB                = GT_FINAL1
    EXCEPTIONS
      PROGRAM_ERROR           = 1
      OTHERS                  = 2.
  IF SY-SUBRC <> 0.
  ENDIF.
ENDFORM.
FORM USER_COMMAND USING  SY-UCOMM RS_SELFIELD TYPE SLIS_SELFIELD.
  CASE SY-UCOMM.
    WHEN '&IC1'.
      READ TABLE GT_FINAL1 ASSIGNING FIELD-SYMBOL(<LS_FINAL1>) INDEX RS_SELFIELD-TABINDEX.
      IF SY-SUBRC = 0.
        IF <LS_FINAL1>-AMOUNT > 0.
          PERFORM GET_PO_DATA USING <LS_FINAL1>-DATE RS_SELFIELD-TABINDEX.
        ENDIF.
      ENDIF.
  ENDCASE.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form GET_PO_DATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM GET_PO_DATA USING I_DATE I_TABIX.
*** PO Data
  DATA :LV_COUNT TYPE INT4 VALUE 1.
  DATA : LV_RETURN TYPE EKPO-NETPR .
  DATA : LV_TAX TYPE EKPO-NETPR .
  REFRESH : GT_FINAL2.
  DATA(LV_DATE) = I_DATE+6(4) && I_DATE+3(2) && I_DATE+0(2).
  BREAK BREDDY .
  GT_DATA_PO[] = GT_DATA[].

*** Suri : added
  DELETE GT_DATA_PO WHERE DUE_DATE <> LV_DATE.
  BREAK SAMBURI.
  DATA(LT_DATA_INW) = GT_DATA_PO.
  SORT GT_DATA_PO BY INWD_DOC.
  DELETE ADJACENT DUPLICATES FROM GT_DATA_PO COMPARING INWD_DOC.

*** Checking For Return PO's
  LOOP AT GT_DATA_PO ASSIGNING FIELD-SYMBOL(<LS_PO>) WHERE RETURN_PO IS NOT INITIAL.
    DATA(LV_RETURN_FLG) = 'X'.
    EXIT.
  ENDLOOP.
  IF LV_RETURN_FLG IS NOT INITIAL.
    IF GT_DATA_PO IS NOT INITIAL.
      SELECT * FROM EKPO INTO TABLE @DATA(IT_EKPO_1) FOR ALL ENTRIES IN @GT_DATA_PO WHERE EBELN = @GT_DATA_PO-RETURN_PO.
      IF IT_EKPO_1 IS NOT INITIAL.
        SELECT * FROM A003 INTO TABLE @DATA(IT_A003_1) FOR ALL ENTRIES IN @IT_EKPO_1 WHERE MWSKZ = @IT_EKPO_1-MWSKZ.
        IF IT_A003 IS NOT INITIAL.
          SELECT * FROM KONP INTO TABLE @DATA(IT_KONP_1) FOR ALL ENTRIES IN @IT_A003_1 WHERE KNUMH = @IT_A003_1-KNUMH.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
*** Suri : Ended
*  IF I_TABIX = 1.
  LOOP AT GT_DATA_PO ASSIGNING <LS_PO> WHERE DUE_DATE = LV_DATE.
*  LOOP AT GT_DATA ASSIGNING FIELD-SYMBOL(<LS_DATA>) WHERE DUE_DATE = LV_DATE.
    GS_FINAL2-SLNO      = LV_COUNT.
    LOOP AT LT_DATA_INW ASSIGNING FIELD-SYMBOL(<LS_DATA>) WHERE INWD_DOC = <LS_PO>-INWD_DOC.

      GS_FINAL2-DATE      = <LS_DATA>-DUE_DATE.
      GS_FINAL2-CURRENCY  = 'INR'.
      GS_FINAL2-EBELN     = <LS_DATA>-EBELN.
      GS_FINAL2-EBELP     = <LS_DATA>-EBELP.
      GS_FINAL2-WAERS     = <LS_DATA>-WAERS.
      GS_FINAL2-LIFNR     = <LS_DATA>-LIFNR.
      GS_FINAL2-NAME1     = <LS_DATA>-NAME1.
      GS_FINAL2-BILL_NUM     = <LS_DATA>-BILL_NUM.
      GS_FINAL2-BILL_DATE     = <LS_DATA>-BILL_DATE.
      GS_FINAL2-GRPO_NO   = <LS_DATA>-MBLNR.
      GS_FINAL2-MATKL     = <LS_DATA>-MATKL.
      GS_FINAL2-AEDAT     = <LS_DATA>-AEDAT.
      GS_FINAL2-INWD_DOC  = <LS_DATA>-INWD_DOC.
      GS_FINAL2-QR_CODE   = <LS_DATA>-QR_CODE.
*            GS_FINAL2-LR_NO    = <LS_DATA>-LR_NO.

      IF <LS_DATA>-BWART = '109'.
        GS_FINAL2-AMOUNT =  GS_FINAL2-AMOUNT  + ( ( <LS_DATA>-NETWR_P / <LS_DATA>-MENGE_P ) * <LS_DATA>-MENGE ) .
      ELSE.
        GS_FINAL2-AMOUNT = GS_FINAL2-AMOUNT + <LS_DATA>-NETWR_P.
      ENDIF.
    ENDLOOP.
**********chnages on 25/06/2019 10:43******************
    IF <LS_PO>-RETURN_PO IS NOT INITIAL .
      LOOP AT IT_EKPO_1 ASSIGNING FIELD-SYMBOL(<WA_RET>) WHERE EBELN = <LS_PO>-RETURN_PO .
*            DATA(DATA_RET) = ( <LS_DATA>-NETWR_P ) * ( -1 ).
        LOOP AT IT_A003_1 ASSIGNING FIELD-SYMBOL(<WA_A003>) WHERE MWSKZ = <WA_RET>-MWSKZ  .
          LOOP AT IT_KONP_1 ASSIGNING FIELD-SYMBOL(<WA_KONP>) WHERE KNUMH = <WA_A003>-KNUMH .
            CASE <WA_KONP>-KSCHL.
              WHEN 'JIIG'.
                LV_TAX = LV_TAX + ( ( <WA_RET>-NETWR *  ( <WA_KONP>-KBETR / 10 ) ) / 100 ) .
              WHEN 'JICG'.
                LV_TAX = LV_TAX + ( ( <WA_RET>-NETWR *  ( <WA_KONP>-KBETR / 10 ) ) / 100 ) .
              WHEN 'JISG'.
                LV_TAX = LV_TAX + ( ( <WA_RET>-NETWR *  ( <WA_KONP>-KBETR / 10 ) ) / 100 ) .
            ENDCASE.
          ENDLOOP.
        ENDLOOP.
        LV_RETURN = LV_RETURN + <WA_RET>-NETWR + LV_TAX .
        CLEAR LV_TAX .
      ENDLOOP .
    ENDIF.
************
    GS_FINAL2-AMOUNT  = GS_FINAL2-AMOUNT -  LV_RETURN  .
    CLEAR LV_RETURN .
    APPEND GS_FINAL2 TO GT_FINAL2.
    CLEAR : GS_FINAL2.
    LV_COUNT = LV_COUNT + 1.
  ENDLOOP.
*  ELSE.
*    LOOP AT GT_DATA ASSIGNING <LS_DATA> WHERE DUE_DATE = LV_DATE.
*      GS_FINAL2-SLNO      = LV_COUNT.
*      GS_FINAL2-DATE      = <LS_DATA>-DUE_DATE.
**      GS_FINAL2-AMOUNT    = <LS_DATA>-NETWR_P.
*      GS_FINAL2-CURRENCY  = 'INR'.
*      GS_FINAL2-EBELN     = <LS_DATA>-EBELN.
*      GS_FINAL2-EBELP     = <LS_DATA>-EBELP.
*      GS_FINAL2-WAERS     = <LS_DATA>-WAERS.
*      GS_FINAL2-LIFNR     = <LS_DATA>-LIFNR.
*      GS_FINAL2-NAME1     = <LS_DATA>-NAME1.
*      GS_FINAL2-GRPO_NO   = <LS_DATA>-MBLNR.
*      GS_FINAL2-MATKL     = <LS_DATA>-MATKL.
*      GS_FINAL2-AEDAT     = <LS_DATA>-AEDAT.
*      GS_FINAL2-INWD_DOC  = <LS_DATA>-INWD_DOC.
*      GS_FINAL2-QR_CODE   = <LS_DATA>-QR_CODE.
*
*      IF <LS_DATA>-BWART = '109'.
*        GS_FINAL2-AMOUNT =  ( <LS_DATA>-NETWR_P / <LS_DATA>-MENGE_P ) * <LS_DATA>-MENGE.
*      ELSE.
*        GS_FINAL2-AMOUNT = <LS_DATA>-NETWR_P.
*      ENDIF.
*      APPEND GS_FINAL2 TO GT_FINAL2.
*      CLEAR : GS_FINAL2.
*      LV_COUNT = LV_COUNT + 1.
*    ENDLOOP.
*  ENDIF.

*** Field Catlog
  DATA:
    WLAYO	TYPE SLIS_LAYOUT_ALV,
    WFCAT TYPE SLIS_FIELDCAT_ALV,
    TFCAT TYPE SLIS_T_FIELDCAT_ALV,
    WVARI TYPE DISVARIANT.
  DATA :GT_SORT TYPE TABLE OF SLIS_T_SORTINFO_ALV,
        LS_SORT TYPE SLIS_T_SORTINFO_ALV.

  WVARI-REPORT    = SY-REPID.
  WVARI-USERNAME  = SY-UNAME.

  WLAYO-ZEBRA       = ABAP_TRUE.

  WLAYO-COLWIDTH_OPTIMIZE  = ABAP_TRUE.
*  WLAYO-BOX_FIELDNAME = 'SEL' .
  REFRESH GT_FTABLE.
  DATA: USER_COMMAND1 TYPE SLIS_FORMNAME VALUE 'USER_COMMAND1'.
*** Field Catlog
  REFRESH : TFCAT.
  WFCAT-FIELDNAME = 'SEL'.
  WFCAT-SELTEXT_L = 'Selection'.
  WFCAT-CHECKBOX = 'X'.
  WFCAT-EDIT = 'X'.
  WFCAT-TABNAME = 'GT_FINAL2'.
  APPEND WFCAT TO TFCAT.
  CLEAR WFCAT.

  WFCAT-FIELDNAME = 'SLNO'.
  WFCAT-SELTEXT_L = 'SLNO'.
  WFCAT-OUTPUTLEN = 4.
*  WFCAT-TABNAME = 'GT_FINAL2'.
  APPEND WFCAT TO TFCAT.
  CLEAR WFCAT.

  WFCAT-FIELDNAME = 'DATE'.
  WFCAT-SELTEXT_L = 'Due Date'.
*  WFCAT-TABNAME = 'GT_FINAL2'.
  APPEND WFCAT TO TFCAT.
  CLEAR WFCAT.

  WFCAT-FIELDNAME = 'LIFNR'.
  WFCAT-SELTEXT_L = 'Vendor'.
*  WFCAT-TABNAME = 'GT_FINAL2'.
  APPEND WFCAT TO TFCAT.
  CLEAR WFCAT.

  WFCAT-FIELDNAME = 'NAME1'.
  WFCAT-SELTEXT_L = 'Vendor Name'.
*  WFCAT-TABNAME = 'GT_FINAL2'.
  APPEND WFCAT TO TFCAT.
  CLEAR WFCAT.

  WFCAT-FIELDNAME = 'EBELN'.
  WFCAT-SELTEXT_L = 'PO'.
*  WFCAT-TABNAME = 'GT_FINAL2'.
  APPEND WFCAT TO TFCAT.
  CLEAR WFCAT.

  WFCAT-FIELDNAME = 'AEDAT'.
  WFCAT-SELTEXT_L = 'Doc Date'.
*  WFCAT-TABNAME = 'GT_FINAL2'.
  APPEND WFCAT TO TFCAT.
  CLEAR WFCAT.

  WFCAT-FIELDNAME = 'INWD_DOC'.
  WFCAT-SELTEXT_L = 'Inward Document'.
*  WFCAT-TABNAME = 'GT_FINAL2'.
  APPEND WFCAT TO TFCAT.
  CLEAR WFCAT.

  WFCAT-FIELDNAME = 'BILL_NUM'.
  WFCAT-SELTEXT_L = 'Bill Number'.
*  WFCAT-TABNAME = 'GT_FINAL2'.
  APPEND WFCAT TO TFCAT.
  CLEAR WFCAT.

  WFCAT-FIELDNAME = 'BILL_DATE'.
  WFCAT-SELTEXT_L = 'Bill Date'.
*  WFCAT-TABNAME = 'GT_FINAL2'.
  APPEND WFCAT TO TFCAT.
  CLEAR WFCAT.

  WFCAT-FIELDNAME = 'GRPO_NO'.
  WFCAT-SELTEXT_L = 'GRPO No'.
*  WFCAT-TABNAME = 'GT_FINAL2'.
  APPEND WFCAT TO TFCAT.
  CLEAR WFCAT.

  WFCAT-FIELDNAME = 'MATKL'.
  WFCAT-SELTEXT_L = 'Material Group'.
*  WFCAT-TABNAME = 'GT_FINAL2'.
  APPEND WFCAT TO TFCAT.
  CLEAR WFCAT.

  WFCAT-FIELDNAME = 'AMOUNT'.
  WFCAT-SELTEXT_S = 'Amount'.
*  WFCAT-TABNAME  = 'GT_FINAL2'.
*  WFCAT-REF_FIELDNAME  = 'NETWR'.
  WFCAT-DO_SUM       = 'X'.


*  ENDIF.
  APPEND WFCAT TO TFCAT.
  CLEAR WFCAT.

  WFCAT-FIELDNAME = 'CURRENCY'.
  WFCAT-SELTEXT_L = 'Currency'.
*  WFCAT-REF_TABNAME = 'GT_FINAL2'.
  APPEND WFCAT TO TFCAT.
  CLEAR WFCAT.
***  Diaplsy PO Detailed Report
*DATA : I_EVENT TYPE TABLE OF SLIS_T_EVENT,
*       W_EVENT TYPE SLIS_T_EVENT.

*
*  REFRESH GT_SORT[].
*  CLEAR LS_SORT.
*
**  ADD 'AMOUNT' TO LS_SORT-SPOS.
*  LS_SORT-FIELDNAME = 'AMOUNT'.
*  LS_SORT-UP = 'X'.
*  LS_SORT-SUBTOT = 'X'.
*  LS_SORT-TABNAME = 'GT_FINAL2'.
*  APPEND LS_SORT TO GT_SORT.

*  M_SORT 'AMOUNT' 'X'.

*  WLAYO-CELL_MERGE = 'X'.
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
*     I_BUFFER_ACTIVE          = ' '
      I_CALLBACK_PROGRAM       = SY-REPID
      I_CALLBACK_PF_STATUS_SET = 'SET_PF_STATUS'
      I_CALLBACK_USER_COMMAND  = USER_COMMAND1
      IS_LAYOUT                = WLAYO
*     I_CALLBACK_HTML_TOP_OF_PAGE = 'TOP_OF_PAGE'
      IT_FIELDCAT              = TFCAT
      I_SAVE                   = 'X'
      IS_VARIANT               = WVARI
*     IT_SORT                  = GT_SORT[]
      I_DEFAULT                = 'A'
    TABLES
      T_OUTTAB                 = GT_FINAL2
    EXCEPTIONS
      PROGRAM_ERROR            = 1
      OTHERS                   = 2.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  set_pf_status
*&---------------------------------------------------------------------*
FORM SET_PF_STATUS USING RT_EXTAB TYPE SLIS_T_EXTAB.
  SET PF-STATUS 'ZPAYSLIP_STATUS1' EXCLUDING RT_EXTAB.
ENDFORM. "Set_pf_status
*&---------------------------------------------------------------------*
*&      Form  user_command
*&---------------------------------------------------------------------*
FORM USER_COMMAND1 USING R_UCOMM     LIKE SY-UCOMM
                        RS_SELFIELD TYPE SLIS_SELFIELD.
  DATA : REF_GRID TYPE REF TO CL_GUI_ALV_GRID.
  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'   "This FM will get the reference of the changed data in ref_grid
    IMPORTING
      E_GRID = REF_GRID.
  IF REF_GRID IS NOT INITIAL.
    CALL METHOD REF_GRID->CHECK_CHANGED_DATA( ).
  ENDIF.
  REFRESH GT_FTABLE.
  BREAK BREDDY .
  CASE R_UCOMM.
    WHEN 'BACK' .
      LEAVE TO SCREEN 0.
    WHEN '&CPRINT'.
      DATA : FORM_NAME TYPE RS38L_FNAM.
      DATA : FORM_NAME1 TYPE RS38L_FNAM.
      DATA : LV_SLNO TYPE I .
      DATA : LV_TOTAL TYPE ZBPREI_PT.

      LOOP AT GT_FINAL2 INTO GS_FINAL2 WHERE SEL = 'X'.
        MOVE-CORRESPONDING  GS_FINAL2 TO GS_FTABLE .
        CLEAR GS_FTABLE-SLNO .
        LV_SLNO = LV_SLNO + 1 .
        GS_FTABLE-SLNO = LV_SLNO .
        LV_TOTAL = GS_FTABLE-AMOUNT + LV_TOTAL.

        APPEND GS_FTABLE TO GT_FTABLE .
        CLEAR GS_FTABLE .
      ENDLOOP.
      CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
        EXPORTING
          FORMNAME           = 'ZCFO_DIARY_FORM'
*         VARIANT            = ' '
*         DIRECT_CALL        = ' '
*         GT_FINAL           = GT_FINAL2
        IMPORTING
          FM_NAME            = FORM_NAME1
        EXCEPTIONS
          NO_FORM            = 1
          NO_FUNCTION_MODULE = 2
          OTHERS             = 3.
      IF SY-SUBRC <> 0.
* Implement suitable error handling here
      ENDIF.
      CALL FUNCTION FORM_NAME1
        EXPORTING
          LV_TOTAL         = LV_TOTAL
*         CONTROL_PARAMETERS = LW_CPARAM
*         OUTPUT_OPTIONS   = OUTPUT_OPTIONS
**           user_settings      = 'X'
*         WA_HEADER        = WA_HEADER
*         WA_ADRC          = WA_ADRC
        TABLES
          GT_FTABLE        = GT_FTABLE
        EXCEPTIONS
          FORMATTING_ERROR = 1
          INTERNAL_ERROR   = 2
          SEND_ERROR       = 3
          USER_CANCELED    = 4
          OTHERS           = 5.

  ENDCASE.
ENDFORM.
