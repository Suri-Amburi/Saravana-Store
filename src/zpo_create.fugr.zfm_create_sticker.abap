FUNCTION ZFM_CREATE_STICKER.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     VALUE(INWARD_DOC) TYPE  ZINWD_DOC
*"  EXPORTING
*"     VALUE(ET_DISPLAY) TYPE  ZTT_STICKER
*"----------------------------------------------------------------------
*** Types declaration for EKKO table
  TYPES: BEGIN OF TY_HDR,
           EBELN   TYPE EBELN,
           QR_CODE TYPE ZQR_CODE,
         END OF TY_HDR.

*** Types declaration for Output data structure
  TYPES: BEGIN OF TY_DET,
           EBELN       TYPE EBELN,
           MBLNR       TYPE MBLNR,
           MJAHR       TYPE MJAHR,
           MSG_TYPE(1),
           MESSAGE     TYPE BAPI_MSG,
           MESSAGE1    TYPE BAPI_MSG,
           ID          TYPE SYMSGID,
           TYPE        TYPE BAPI_MTYPE,
           ENTRYSHEET  TYPE SYMSGV,
         END OF TY_DET.

  TYPES : BEGIN OF TY_DOC ,
            MBLNR        TYPE MATDOC-MBLNR,
            ZEILE        TYPE MATDOC-ZEILE,
            MJAHR        TYPE MATDOC-MJAHR,
            MATNR        TYPE MATDOC-MATNR,
            EBELN        TYPE MATDOC-EBELN,
            EBELP        TYPE MATDOC-EBELP,
            MENGE        TYPE MATDOC-MENGE,
            CHARG        TYPE MATDOC-CHARG,
            BUDAT        TYPE MATDOC-BUDAT,
            QR_CODE      TYPE ZINW_T_HDR-QR_CODE,
            INWD_DOC     TYPE ZINW_T_HDR-INWD_DOC,
            ZZLABEL_DESC TYPE MARA-ZZLABEL_DESC,
            MAKTX        TYPE ZINW_T_ITEM-MAKTX,
            NETPR_S      TYPE ZINW_T_ITEM-NETPR_S,
          END OF TY_DOC .

  DATA : LT_DOC TYPE TABLE OF TY_DOC .
  DATA : LS_EXPORT  TYPE ZSTICKER_DET .
*** Internal Tables Declaration
  DATA: LT_HDR  TYPE STANDARD TABLE OF ZINW_T_HDR,
        LT_ITEM TYPE STANDARD TABLE OF ZINW_T_ITEM,
        LT_DET  TYPE STANDARD TABLE OF TY_DET.

*** Work area Declarations
  DATA: WA_HDR  TYPE ZINW_T_HDR,
        WA_ITEM TYPE ZINW_T_ITEM,
        WA_DET  TYPE TY_DET.

*** BAPI Structure Declaration
  DATA:
    WA_GMVT_HEADER  TYPE BAPI2017_GM_HEAD_01,
    WA_GMVT_ITEM    TYPE BAPI2017_GM_ITEM_CREATE,
    WA_GMVT_HEADRET TYPE BAPI2017_GM_HEAD_RET,
    LT_BAPIRET      TYPE STANDARD TABLE OF BAPIRET2,
    LT_GMVT_ITEM    TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE.
  FIELD-SYMBOLS :
    <LS_BAPIRET> TYPE BAPIRET2.

DATA : C_MVT_01 type BAPI2017_GM_CODE .
*** Constants
  CONSTANTS :
    C_101(3)       VALUE '101',
    C_103(3)       VALUE '107',
    C_MVT_IND_B(1) VALUE 'B',
*    C_MVT_01(2)    VALUE '01',
    C_02(2)        VALUE '02',
    C_X(1)         VALUE 'X',
    C_ZLOP(4)      VALUE 'ZLOP',
    C_EXIT(4)      VALUE 'EXIT',
    C_BACK(4)      VALUE 'BACK',
    C_CANCEL(4)    VALUE 'CANCEL',
    C_LABEL(5)     VALUE 'LABEL',
    C_GRPO_S(4)    VALUE 'GR_S',
    C_GRPO_P(4)    VALUE 'GR_P',
    C_01(2)        VALUE '01',
    C_03(2)        VALUE '03',
    C_04(2)        VALUE '04',
    C_QR03(4)      VALUE 'QR03',
    C_QR04(4)      VALUE 'QR04',
    C_QR_CODE(7)   VALUE 'QR_CODE',
    C_ZTAT(4)      VALUE 'ZTAT',
    C_SOE(4)       VALUE 'SOE',
    C_SE01(4)      VALUE 'SE01',
    C_ZKP0(4)      VALUE 'ZKP0',
    C_UC(2)        VALUE 'ZE'.

  DATA :
    GV_MAT_DOC  TYPE MBLNR,
    GV_DOC_YEAR TYPE MJAHR.

  DATA : LS_STATUS TYPE ZINW_T_STATUS.
  DATA : LT_STATUS TYPE TABLE OF ZINW_T_STATUS.
  CLEAR : LS_STATUS.
  REFRESH : LT_STATUS.
*** Retrieve PO documents from Header table
***  Start of Change By Suri : 08.08.2019 14:00:00
  DATA(LV_INWARD_DOC) = |{ INWARD_DOC ALPHA = IN }|.
***  End of Change By Suri : 08.08.2019 14:00:00
  CLEAR : WA_HDR.
  SELECT SINGLE * FROM ZINW_T_HDR INTO WA_HDR WHERE INWD_DOC = LV_INWARD_DOC.
  SELECT SINGLE BSART FROM EKKO INTO @DATA(LV_BSART) WHERE EBELN = @WA_HDR-EBELN.
  IF LV_BSART =  C_ZLOP.                             ""C_ZTAT OR LV_BSART =
    IF WA_HDR-STATUS  = C_MVT_01-GM_CODE .                                 ""<> C_02.
    ELSE.
      MESSAGE S003(ZMSG_CLS) DISPLAY LIKE 'E'.
      LEAVE LIST-PROCESSING.
    ENDIF.
  ENDIF.
  IF WA_HDR IS NOT INITIAL.
*** Retrieve PO document details from Item (item) table
    TRY .
        ZCL_GRPO=>GET_INW_ITEM(
          EXPORTING
            I_QR          = WA_HDR-QR_CODE
          IMPORTING
            T_ITEM        = LT_ITEM ).
      CATCH CX_AMDP_ERROR.
    ENDTRY.
  ELSE.
    MESSAGE S003(ZMSG_CLS) DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.

*** Fill the bapi Header structure details
  WA_GMVT_HEADER-PSTNG_DATE = SY-DATUM.
  WA_GMVT_HEADER-DOC_DATE   = SY-DATUM.
  WA_GMVT_HEADER-PR_UNAME   = SY-UNAME.
  WA_GMVT_HEADER-REF_DOC_NO = WA_HDR-QR_CODE.
*** Looping the PO details.
  LOOP AT LT_ITEM INTO WA_ITEM WHERE MENGE_S IS NOT INITIAL.
*** FILL THE BAPI ITEM STRUCTURE DETAILS
    WA_GMVT_ITEM-MATERIAL  = WA_ITEM-MATNR.
    WA_GMVT_ITEM-ITEM_TEXT = WA_ITEM-MAKTX.
    WA_GMVT_ITEM-PLANT     = WA_ITEM-WERKS.
    WA_GMVT_ITEM-STGE_LOC  = WA_ITEM-LGORT.
*** For Doc type ZLOP - 103
    IF LV_BSART = C_ZLOP.
      WA_GMVT_ITEM-MOVE_TYPE = C_103.
*    ELSE.
*      WA_GMVT_ITEM-MOVE_TYPE = C_101.
    ENDIF.
    WA_GMVT_ITEM-PO_NUMBER = WA_ITEM-EBELN.
    WA_GMVT_ITEM-PO_ITEM   = WA_ITEM-EBELP.
    WA_GMVT_ITEM-ENTRY_QNT = WA_ITEM-MENGE_S.
    WA_GMVT_ITEM-ENTRY_UOM = WA_ITEM-MEINS.
    WA_GMVT_ITEM-PROD_DATE = SY-DATUM.
    WA_GMVT_ITEM-MVT_IND   = C_MVT_IND_B.

    APPEND WA_GMVT_ITEM TO LT_GMVT_ITEM.
    CLEAR WA_GMVT_ITEM.
  ENDLOOP.
*  BREAK-POINT.
*** Call the BAPI FM for GR posting
    C_MVT_01-GM_CODE = '01' .
  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      GOODSMVT_HEADER  = WA_GMVT_HEADER
      GOODSMVT_CODE    = C_MVT_01
    IMPORTING
      GOODSMVT_HEADRET = WA_GMVT_HEADRET
    TABLES
      GOODSMVT_ITEM    = LT_GMVT_ITEM
      RETURN           = LT_BAPIRET.

  READ TABLE LT_BAPIRET ASSIGNING <LS_BAPIRET> WITH KEY TYPE = 'E'.
  IF SY-SUBRC <> 0 .
*** For commit the changes use BAPI_TRANSACTION_COMMIT FM.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = C_X.

    GV_MAT_DOC =  WA_DET-MBLNR = WA_GMVT_HEADRET-MAT_DOC .
    GV_DOC_YEAR = WA_DET-MJAHR = WA_GMVT_HEADRET-DOC_YEAR.
    WA_DET-EBELN = WA_HDR-EBELN.
    WA_DET-MESSAGE = 'Successfully Posted'.
    WA_DET-MSG_TYPE = 'S'.
    APPEND WA_DET TO LT_DET.
    CLEAR : WA_DET, LS_STATUS.
*** Updating Material Doc in Indw Header
*** For Doc type ZLOP - 103
*** Status Update
    LS_STATUS-INWD_DOC     = WA_HDR-INWD_DOC.
    LS_STATUS-QR_CODE      = WA_HDR-QR_CODE.
    LS_STATUS-STATUS_FIELD = C_QR_CODE.
    LS_STATUS-CREATED_BY   = SY-UNAME.
    LS_STATUS-CREATED_DATE = SY-DATUM.
    LS_STATUS-CREATED_TIME = SY-UZEIT.

    IF LV_BSART = C_ZLOP.
      WA_HDR-MBLNR_103 = WA_GMVT_HEADRET-MAT_DOC.
      WA_HDR-STATUS = C_03.              " Local GRPO DONE
      LS_STATUS-STATUS_VALUE = C_QR03.
      LS_STATUS-DESCRIPTION  = 'Local GR Posted'.
      APPEND LS_STATUS TO LT_STATUS.
    ELSEIF LV_BSART = C_ZTAT.
      WA_HDR-MBLNR  = WA_GMVT_HEADRET-MAT_DOC.
      WA_HDR-STATUS = C_04.              " GRPO DONE
      WA_HDR-SOE    = C_01.              " Matched
      LS_STATUS-STATUS_VALUE = C_QR04.
      LS_STATUS-DESCRIPTION  = 'GR Posted'.
      APPEND LS_STATUS TO LT_STATUS.
***  For SOE Update Status
      LS_STATUS-STATUS_FIELD = C_SOE.
      LS_STATUS-STATUS_VALUE = C_SE01.
      LS_STATUS-DESCRIPTION  = 'Matched'.
      APPEND LS_STATUS TO LT_STATUS.
    ELSE.
      WA_HDR-MBLNR  = WA_GMVT_HEADRET-MAT_DOC.
      WA_HDR-STATUS = C_04.              " GRPO DONE
      LS_STATUS-STATUS_VALUE = C_QR04.
      LS_STATUS-DESCRIPTION  = 'GR Posted'.
      APPEND LS_STATUS TO LT_STATUS.
    ENDIF.

    MODIFY ZINW_T_HDR FROM WA_HDR.
    MODIFY ZINW_T_STATUS FROM TABLE LT_STATUS.
    COMMIT WORK.
************ENTRYSHEET CREATION******************
**    PERFORM ENTRYSHEET.
*    DATA:
*      BAPI_ESLL        LIKE BAPIESLLC OCCURS 1 WITH HEADER LINE,
*      PO_ITEMS         TYPE BAPIEKPO OCCURS 0 WITH HEADER LINE,
*      PO_SERVICES      TYPE BAPIESLL OCCURS 0 WITH HEADER LINE,
*      BAPI_RETURN_PO   TYPE TABLE OF BAPIRET2,
*      WA_HEADER        TYPE BAPIESSRC,
*      I_RETURN         TYPE TABLE OF BAPIRET2,
*      S_RETURN         TYPE  BAPIRET2,
*      SERIAL_NO        LIKE BAPIESKNC-SERIAL_NO,
*      LINE_NO          LIKE BAPIESLLC-LINE_NO,
*      WS_ENTRYSHEET_NO TYPE  BAPIESSR-SHEET_NO,
*      WA_RETURN        TYPE TY_DET,
*      WA_PO_HEADER     TYPE BAPIEKKOL.
*
*    SELECT SINGLE * FROM ZINW_T_HDR INTO WA_HDR WHERE INWD_DOC = LV_INWARD.
*    IF WA_HDR-SERVICE_PO IS NOT INITIAL.
*      CALL FUNCTION 'BAPI_PO_GETDETAIL'
*        EXPORTING
*          PURCHASEORDER    = WA_HDR-SERVICE_PO
*          ITEMS            = 'X'
*          SERVICES         = 'X'
*        IMPORTING
*          PO_HEADER        = WA_PO_HEADER
*        TABLES
*          PO_ITEMS         = PO_ITEMS
*          PO_ITEM_SERVICES = PO_SERVICES
*          RETURN           = BAPI_RETURN_PO.
*
*      WA_HEADER-PO_NUMBER = PO_ITEMS-PO_NUMBER.
*      WA_HEADER-PO_ITEM = PO_ITEMS-PO_ITEM.
*      WA_HEADER-SHORT_TEXT = 'Service Entry Sheet'.
*      WA_HEADER-ACCEPTANCE = 'X'.
*      WA_HEADER-POST_DATE = SY-DATUM.
*      WA_HEADER-DOC_DATE = SY-DATUM.
*      WA_HEADER-PCKG_NO = 1.
*      SERIAL_NO = 0.
*      LINE_NO = 1.
*
*      BAPI_ESLL-PCKG_NO = 1.
*      BAPI_ESLL-LINE_NO = LINE_NO.
*      BAPI_ESLL-OUTL_LEVEL = '0'.
*      BAPI_ESLL-OUTL_IND = 'X'.
*      BAPI_ESLL-SUBPCKG_NO = 2.
*      APPEND BAPI_ESLL.
*
*      LOOP AT PO_SERVICES WHERE NOT SHORT_TEXT IS INITIAL.
*        CLEAR BAPI_ESLL.
*        BAPI_ESLL-PCKG_NO = 2.
*        BAPI_ESLL-LINE_NO = LINE_NO * 10.
*        BAPI_ESLL-SERVICE = PO_SERVICES-SERVICE.
*        BAPI_ESLL-SHORT_TEXT = PO_SERVICES-SHORT_TEXT.
*        BAPI_ESLL-QUANTITY = PO_SERVICES-QUANTITY.
*        BAPI_ESLL-GR_PRICE = PO_SERVICES-GR_PRICE.
*        BAPI_ESLL-PRICE_UNIT = PO_SERVICES-PRICE_UNIT.
*        APPEND BAPI_ESLL.
*        LINE_NO = LINE_NO + 1.
*      ENDLOOP.
*
*      CALL FUNCTION 'BAPI_ENTRYSHEET_CREATE'
*        EXPORTING
*          ENTRYSHEETHEADER   = WA_HEADER
*        IMPORTING
*          ENTRYSHEET         = WS_ENTRYSHEET_NO
*        TABLES
*          ENTRYSHEETSERVICES = BAPI_ESLL
*          RETURN             = I_RETURN.
*
*      DATA(WS_WAIT) = '3'.
*      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*        EXPORTING
*          WAIT = WS_WAIT.
*
*      LOOP AT I_RETURN INTO S_RETURN.
*        IF  S_RETURN-TYPE = 'E'.
*          WA_RETURN-MBLNR    = WA_HDR-MBLNR = WA_GMVT_HEADRET-MAT_DOC .
*          WA_RETURN-EBELN    = WA_HDR-SERVICE_PO.
*          WA_RETURN-TYPE     = S_RETURN-TYPE.
*          WA_RETURN-ID       = S_RETURN-ID.
*          WA_RETURN-MESSAGE1 = S_RETURN-MESSAGE.
*          APPEND WA_RETURN TO LT_DET.
*        ELSEIF S_RETURN-TYPE = 'S'.
*          WA_RETURN-EBELN    =  WA_HDR-SERVICE_PO.
*          WA_RETURN-MESSAGE  = S_RETURN-MESSAGE.
*          WA_RETURN-ENTRYSHEET  = S_RETURN-MESSAGE_V1.
*          WA_RETURN-MSG_TYPE = S_RETURN-TYPE.
*          APPEND WA_RETURN TO LT_DET.
*          CLEAR WA_DET.
*        ENDIF.
*      ENDLOOP.
*    ENDIF.
***************End of service entrysheet******************
*  ELSE.
*    WA_DET-MBLNR    = WA_HDR-MBLNR = WA_GMVT_HEADRET-MAT_DOC .
*    WA_DET-MJAHR    = WA_GMVT_HEADRET-DOC_YEAR.
*    WA_DET-EBELN    = WA_HDR-EBELN.
*    WA_DET-MESSAGE  = <LS_BAPIRET>-MESSAGE.
*    WA_DET-MSG_TYPE = <LS_BAPIRET>-TYPE.
*    APPEND WA_DET TO LT_DET.
*    CLEAR WA_DET.
  ENDIF.

  SELECT MATDOC~MBLNR
         MATDOC~ZEILE
         MATDOC~MJAHR
         MATDOC~MATNR
         MATDOC~EBELN
         MATDOC~EBELP
         MATDOC~MENGE
         MATDOC~CHARG
         MATDOC~BUDAT
         ZINW_T_HDR~QR_CODE
         ZINW_T_HDR~INWD_DOC
         MARA~ZZLABEL_DESC
         ZINW_T_ITEM~MAKTX
         ZINW_T_ITEM~NETPR_S
         INTO TABLE LT_DOC
         FROM  MATDOC AS MATDOC
         INNER JOIN ZINW_T_HDR AS ZINW_T_HDR ON ZINW_T_HDR~MBLNR_103 = MATDOC~MBLNR
         INNER JOIN ZINW_T_ITEM ON ZINW_T_HDR~QR_CODE = ZINW_T_ITEM~QR_CODE AND ZINW_T_ITEM~EBELN = MATDOC~EBELN AND ZINW_T_ITEM~EBELP = MATDOC~EBELP
         INNER JOIN MARA AS MARA ON MARA~MATNR = ZINW_T_ITEM~MATNR
         WHERE MATDOC~MBLNR =  WA_HDR-MBLNR_103 .                        "" AND MATDOC~MJAHR = .

  LOOP AT LT_DOC ASSIGNING FIELD-SYMBOL(<LS_DOC>).
    DO <LS_DOC>-MENGE TIMES .
      LS_EXPORT-PO_NUMBER =  <LS_DOC>-EBELN .
      LS_EXPORT-ITEM =  <LS_DOC>-EBELP .
      LS_EXPORT-QUANTITY =  '1' .
      LS_EXPORT-BATCH =  <LS_DOC>-CHARG .
      LS_EXPORT-SELLING_PRICE =  <LS_DOC>-NETPR_S .
      LS_EXPORT-MATERIAL_DOC =  <LS_DOC>-MBLNR .
      LS_EXPORT-DESCRIPTION =  <LS_DOC>-MAKTX .
      LS_EXPORT-DATE =  <LS_DOC>-BUDAT .
      LS_EXPORT-INWARD_DOC =  <LS_DOC>-INWD_DOC .
      APPEND LS_EXPORT TO ET_DISPLAY .
      CLEAR LS_EXPORT .
    ENDDO.
  ENDLOOP.
ENDFUNCTION.
